// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240923161405_InitCompany")]
    partial class InitCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessStreamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessStream");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessStreamName = "Tech",
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(3000),
                            Description = "Tech Industry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BusinessStreamId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStreamId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "39 Vo Chi Cong Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "Fpt Software",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(3638),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 1000,
                            WebsiteURL = "https://fpt.com/vi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "64 Le Van Si Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "High Tech",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(3643),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 50,
                            WebsiteURL = "https://fpt.com/vi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeekerProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeekerProfileId");

                    b.ToTable("EducationDetail");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeekerProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeekerProfileId");

                    b.ToTable("ExperienceDetail");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StressAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "HCM",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(4976),
                            District = "District 9",
                            IsDeleted = false,
                            PostCode = "123",
                            State = "state",
                            StressAddress = "521 Le Van Si Stress"
                        });
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperienceRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualificationRequired")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobLocationId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostActivity");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SkillLevelRequired")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("JobSkillSet");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Full Time Job",
                            Name = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Part Time Job",
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Remote Job",
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SeekerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CvPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitHubProfileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkedInProfileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PortfolioURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerProfile");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeekerProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeekerProfileId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("SeekerSkillSet");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shorthand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SkillSet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(9573),
                            Description = "Business Analyst",
                            IsDeleted = false,
                            Name = "Business Analyst",
                            Shorthand = "BA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(9577),
                            Description = "C#",
                            IsDeleted = false,
                            Name = "C#",
                            Shorthand = "C#"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(9578),
                            Description = "Java Script",
                            IsDeleted = false,
                            Name = "Java Script",
                            Shorthand = "JS"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(2158),
                            Email = "User1@gmail.com",
                            IsDeleted = false,
                            LastName = "User1",
                            PasswordHash = new byte[] { 146, 15, 123, 240, 44, 151, 141, 228, 18, 115, 44, 245, 147, 59, 113, 72, 228, 132, 220, 29, 252, 26, 90, 131, 219, 0, 200, 179, 184, 254, 157, 133, 133, 120, 172, 184, 5, 184, 232, 235, 184, 130, 225, 226, 160, 26, 180, 241, 40, 23, 26, 5, 109, 51, 153, 89, 80, 35, 221, 91, 217, 37, 237, 104 },
                            PasswordSalt = new byte[] { 145, 13, 113, 156, 246, 128, 245, 47, 163, 127, 151, 88, 48, 208, 188, 211, 11, 70, 93, 239, 100, 38, 1, 200, 24, 23, 4, 49, 50, 18, 148, 112, 91, 10, 60, 95, 157, 18, 9, 71, 45, 34, 190, 169, 49, 5, 57, 26, 158, 43, 206, 139, 212, 168, 59, 87, 63, 208, 50, 235, 147, 18, 98, 180, 26, 141, 132, 91, 206, 221, 174, 169, 117, 134, 20, 129, 100, 122, 3, 67, 12, 171, 254, 221, 69, 151, 132, 145, 64, 29, 222, 201, 55, 165, 163, 35, 207, 150, 226, 202, 100, 44, 31, 250, 112, 226, 50, 203, 5, 99, 8, 76, 132, 150, 235, 211, 184, 131, 59, 210, 28, 36, 109, 225, 118, 21, 161, 102 },
                            Role = 0,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(2166),
                            Email = "User2@gmail.com",
                            IsDeleted = false,
                            LastName = "User2",
                            PasswordHash = new byte[] { 18, 148, 131, 51, 243, 182, 203, 38, 18, 100, 20, 69, 184, 2, 26, 137, 190, 0, 5, 252, 72, 30, 65, 96, 221, 186, 221, 233, 152, 151, 247, 38, 181, 32, 221, 173, 190, 226, 193, 183, 108, 215, 79, 126, 152, 248, 187, 186, 255, 60, 86, 249, 155, 185, 166, 76, 138, 119, 131, 77, 255, 178, 2, 5 },
                            PasswordSalt = new byte[] { 191, 91, 157, 72, 103, 5, 86, 227, 223, 89, 223, 156, 101, 37, 242, 238, 122, 111, 58, 13, 143, 157, 110, 187, 27, 183, 22, 197, 220, 36, 194, 101, 19, 178, 110, 225, 98, 59, 69, 149, 188, 81, 208, 208, 124, 80, 209, 126, 241, 157, 32, 65, 162, 126, 168, 188, 191, 18, 57, 4, 146, 217, 37, 15, 34, 30, 185, 60, 253, 139, 215, 169, 21, 168, 252, 29, 222, 67, 9, 144, 83, 246, 224, 225, 79, 47, 37, 199, 255, 247, 231, 129, 206, 117, 216, 166, 170, 12, 83, 72, 169, 9, 10, 136, 26, 193, 116, 214, 149, 45, 177, 242, 51, 138, 42, 177, 12, 157, 198, 214, 223, 26, 79, 74, 115, 20, 198, 221 },
                            Role = 0,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(2168),
                            Email = "Employer@gmail.com",
                            IsDeleted = false,
                            LastName = "Employer",
                            PasswordHash = new byte[] { 255, 212, 206, 187, 68, 178, 254, 73, 33, 101, 118, 208, 134, 21, 84, 77, 71, 154, 215, 227, 212, 164, 58, 179, 118, 12, 159, 159, 62, 31, 143, 10, 69, 18, 207, 134, 231, 76, 241, 41, 227, 253, 111, 167, 35, 223, 123, 62, 51, 25, 116, 193, 0, 103, 148, 196, 65, 22, 182, 75, 237, 50, 174, 78 },
                            PasswordSalt = new byte[] { 195, 221, 232, 185, 114, 148, 241, 60, 158, 90, 23, 112, 152, 31, 60, 37, 60, 3, 160, 22, 12, 89, 79, 248, 233, 180, 50, 107, 129, 93, 62, 215, 203, 133, 64, 30, 217, 161, 145, 223, 133, 227, 234, 38, 171, 107, 30, 249, 189, 19, 155, 33, 185, 142, 35, 192, 232, 117, 53, 249, 98, 53, 98, 11, 62, 112, 65, 92, 37, 89, 243, 195, 56, 46, 70, 150, 181, 173, 38, 6, 24, 64, 123, 229, 92, 22, 184, 245, 175, 104, 194, 13, 28, 84, 245, 94, 162, 211, 128, 24, 135, 168, 177, 67, 216, 14, 89, 214, 178, 238, 215, 56, 182, 183, 188, 85, 54, 44, 52, 184, 54, 74, 107, 223, 228, 32, 140, 58 },
                            Role = 1,
                            UserName = "Employer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 23, 16, 14, 5, 334, DateTimeKind.Utc).AddTicks(2169),
                            Email = "Admin@gmail.com",
                            IsDeleted = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 71, 132, 89, 175, 129, 88, 235, 34, 64, 188, 166, 126, 218, 82, 243, 157, 228, 93, 112, 104, 185, 6, 13, 248, 188, 134, 26, 243, 46, 252, 210, 16, 233, 225, 225, 24, 254, 146, 220, 34, 225, 86, 115, 21, 239, 98, 24, 111, 68, 229, 35, 116, 233, 95, 193, 45, 250, 204, 43, 134, 172, 70, 118, 134 },
                            PasswordSalt = new byte[] { 166, 149, 133, 167, 158, 170, 142, 163, 236, 240, 6, 250, 12, 97, 38, 54, 65, 186, 248, 239, 101, 91, 67, 134, 114, 249, 2, 103, 76, 248, 177, 118, 41, 41, 236, 106, 206, 132, 132, 253, 147, 168, 120, 206, 17, 242, 115, 221, 45, 171, 93, 23, 80, 147, 117, 55, 13, 90, 9, 2, 90, 8, 214, 54, 167, 147, 196, 112, 132, 39, 19, 94, 66, 119, 128, 19, 105, 184, 192, 67, 62, 77, 117, 159, 72, 228, 116, 85, 177, 239, 185, 212, 93, 159, 223, 47, 119, 195, 115, 64, 51, 198, 1, 123, 74, 218, 120, 91, 219, 205, 39, 99, 8, 114, 227, 174, 53, 44, 66, 95, 212, 241, 184, 117, 49, 187, 107, 10 },
                            Role = 2,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.BusinessStream", "BusinessStream")
                        .WithMany("Companys")
                        .HasForeignKey("BusinessStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessStream");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.HasOne("Domain.Entities.SeekerProfile", "SeekerProfile")
                        .WithMany("EducationDetails")
                        .HasForeignKey("SeekerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeekerProfile");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("Domain.Entities.SeekerProfile", "SeekerProfile")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("SeekerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeekerProfile");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobLocation", "JobLocation")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobLocation");

                    b.Navigation("JobType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.SeekerProfile", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.SeekerProfile", "SeekerProfile")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SeekerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeekerProfile");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.SeekerProfile", b =>
                {
                    b.Navigation("EducationDetails");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Navigation("JobSkillSets");

                    b.Navigation("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPosts");

                    b.Navigation("SeekerProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
