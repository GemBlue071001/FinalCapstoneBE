// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241007123554_addImgToCompany")]
    partial class addImgToCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessStreamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessStreams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessStreamName = "Tech",
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 441, DateTimeKind.Utc).AddTicks(9134),
                            Description = "Tech Industry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BusinessStreamId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStreamId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "39 Vo Chi Cong Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "Fpt Software",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 442, DateTimeKind.Utc).AddTicks(953),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 1000,
                            WebsiteURL = "https://fpt.com/vi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "64 Le Van Si Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "High Tech",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 442, DateTimeKind.Utc).AddTicks(959),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 50,
                            WebsiteURL = "https://fpt.com/vi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StressAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "HCM",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 442, DateTimeKind.Utc).AddTicks(5264),
                            District = "District 9",
                            IsDeleted = false,
                            PostCode = "123",
                            State = "state",
                            StressAddress = "521 Le Van Si Stress"
                        });
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperienceRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualificationRequired")
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int>("SkillLevelRequired")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobLocationId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CvId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostActivitys");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Full Time Job",
                            Name = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Part Time Job",
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Remote Job",
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shorthand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 443, DateTimeKind.Utc).AddTicks(4236),
                            Description = "Business Analyst",
                            IsDeleted = false,
                            Name = "Business Analyst",
                            Shorthand = "BA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 443, DateTimeKind.Utc).AddTicks(4240),
                            Description = "C#",
                            IsDeleted = false,
                            Name = "C#",
                            Shorthand = "C#"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 443, DateTimeKind.Utc).AddTicks(4241),
                            Description = "Java Script",
                            IsDeleted = false,
                            Name = "Java Script",
                            Shorthand = "JS"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 441, DateTimeKind.Utc).AddTicks(8208),
                            Email = "User1@gmail.com",
                            IsDeleted = false,
                            LastName = "User1",
                            PasswordHash = new byte[] { 252, 183, 229, 70, 148, 47, 212, 206, 92, 218, 147, 255, 73, 71, 192, 207, 224, 240, 189, 223, 152, 151, 139, 102, 184, 30, 83, 128, 213, 82, 51, 190, 143, 102, 30, 2, 27, 194, 242, 119, 160, 211, 24, 177, 11, 167, 98, 120, 237, 172, 95, 165, 118, 11, 243, 199, 53, 166, 25, 86, 107, 105, 169, 4 },
                            PasswordSalt = new byte[] { 9, 50, 98, 80, 30, 59, 142, 123, 32, 81, 160, 179, 193, 155, 177, 201, 5, 114, 48, 125, 11, 87, 218, 53, 188, 38, 133, 214, 0, 169, 126, 110, 178, 43, 25, 123, 4, 138, 156, 232, 90, 233, 84, 78, 247, 29, 232, 219, 175, 97, 250, 49, 240, 36, 57, 66, 67, 116, 101, 180, 109, 164, 105, 207, 147, 65, 200, 213, 92, 238, 247, 39, 185, 169, 38, 202, 14, 98, 172, 46, 31, 34, 47, 140, 116, 187, 245, 38, 26, 177, 140, 182, 105, 199, 151, 77, 34, 38, 99, 20, 144, 18, 187, 169, 9, 176, 159, 21, 158, 208, 243, 117, 200, 115, 41, 154, 247, 86, 17, 208, 139, 188, 207, 51, 127, 224, 88, 169 },
                            Role = 0,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 441, DateTimeKind.Utc).AddTicks(8216),
                            Email = "User2@gmail.com",
                            IsDeleted = false,
                            LastName = "User2",
                            PasswordHash = new byte[] { 87, 103, 214, 72, 252, 55, 31, 127, 161, 112, 166, 162, 131, 243, 201, 90, 155, 169, 135, 157, 207, 170, 209, 229, 152, 83, 111, 164, 149, 188, 208, 54, 163, 77, 235, 243, 15, 21, 157, 178, 103, 43, 70, 173, 252, 72, 37, 93, 49, 25, 127, 118, 206, 26, 239, 98, 18, 59, 7, 213, 96, 69, 100, 114 },
                            PasswordSalt = new byte[] { 148, 178, 112, 88, 149, 63, 245, 47, 191, 165, 114, 208, 196, 130, 149, 238, 209, 191, 194, 186, 14, 213, 131, 221, 243, 76, 140, 173, 2, 219, 16, 14, 211, 139, 155, 6, 109, 143, 49, 223, 190, 13, 202, 185, 159, 204, 0, 65, 198, 20, 57, 46, 1, 153, 151, 182, 127, 172, 35, 59, 133, 210, 201, 230, 100, 76, 50, 169, 157, 224, 250, 36, 120, 138, 43, 20, 151, 175, 202, 222, 48, 83, 106, 112, 57, 173, 106, 135, 20, 22, 72, 42, 174, 189, 79, 146, 141, 83, 135, 180, 58, 151, 187, 127, 33, 119, 14, 32, 234, 123, 132, 168, 77, 164, 208, 2, 95, 183, 15, 97, 227, 205, 3, 138, 143, 53, 84, 129 },
                            Role = 0,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 441, DateTimeKind.Utc).AddTicks(8218),
                            Email = "Employer@gmail.com",
                            IsDeleted = false,
                            LastName = "Employer",
                            PasswordHash = new byte[] { 147, 145, 233, 227, 64, 88, 93, 15, 192, 246, 60, 23, 10, 199, 126, 255, 42, 76, 146, 157, 219, 71, 121, 2, 187, 171, 2, 184, 21, 185, 254, 141, 179, 185, 66, 103, 153, 30, 246, 219, 0, 65, 190, 149, 207, 227, 31, 201, 224, 2, 223, 82, 197, 72, 174, 59, 183, 166, 191, 24, 241, 67, 149, 126 },
                            PasswordSalt = new byte[] { 22, 79, 10, 30, 243, 186, 229, 219, 138, 234, 183, 26, 48, 149, 182, 206, 192, 175, 252, 60, 21, 171, 9, 220, 142, 41, 195, 133, 113, 136, 208, 64, 166, 83, 53, 32, 10, 97, 149, 235, 81, 83, 228, 212, 102, 222, 217, 112, 126, 245, 24, 128, 154, 65, 41, 194, 69, 172, 185, 147, 201, 14, 88, 225, 229, 243, 29, 219, 130, 210, 132, 252, 157, 26, 252, 239, 68, 216, 38, 68, 107, 205, 149, 135, 70, 168, 202, 86, 144, 114, 147, 55, 78, 149, 130, 0, 111, 229, 89, 35, 197, 19, 122, 197, 109, 60, 32, 100, 57, 136, 67, 150, 187, 205, 219, 143, 21, 171, 190, 71, 158, 13, 19, 42, 193, 180, 50, 36 },
                            Role = 1,
                            UserName = "Employer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 10, 7, 12, 35, 54, 441, DateTimeKind.Utc).AddTicks(8220),
                            Email = "Admin@gmail.com",
                            IsDeleted = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 123, 151, 124, 75, 19, 208, 104, 155, 103, 188, 226, 173, 128, 2, 119, 241, 172, 92, 10, 135, 204, 162, 253, 180, 153, 241, 236, 64, 150, 136, 224, 140, 255, 157, 194, 18, 22, 228, 136, 173, 218, 188, 91, 33, 206, 210, 168, 246, 7, 134, 105, 79, 129, 27, 48, 26, 218, 85, 97, 21, 201, 190, 161, 59 },
                            PasswordSalt = new byte[] { 124, 204, 137, 94, 223, 253, 64, 116, 162, 49, 215, 252, 84, 6, 199, 246, 143, 221, 125, 39, 29, 149, 17, 115, 162, 121, 155, 176, 193, 173, 235, 162, 133, 178, 112, 110, 182, 21, 48, 157, 47, 43, 18, 156, 227, 53, 145, 195, 7, 30, 98, 91, 32, 160, 215, 38, 85, 58, 157, 56, 109, 90, 150, 48, 91, 132, 10, 148, 111, 3, 83, 115, 89, 86, 163, 41, 57, 36, 232, 13, 224, 96, 236, 106, 145, 105, 49, 72, 175, 131, 198, 58, 156, 157, 111, 95, 204, 200, 32, 80, 165, 22, 189, 94, 232, 233, 154, 179, 150, 35, 42, 232, 83, 24, 115, 20, 36, 147, 78, 38, 90, 58, 92, 127, 236, 223, 79, 137 },
                            Role = 2,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("CVs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.BusinessStream", "BusinessStream")
                        .WithMany("Companys")
                        .HasForeignKey("BusinessStreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessStream");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("EducationDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobLocation", "JobLocation")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobLocation");

                    b.Navigation("JobType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.HasOne("Domain.Entities.CV", "CV")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("UserAccounts")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Navigation("JobPostActivitys");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Navigation("JobSkillSets");

                    b.Navigation("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("CVs");

                    b.Navigation("EducationDetails");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("SeekerSkillSets");
                });
#pragma warning restore 612, 618
        }
    }
}
