// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessStreamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessStreams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessStreamName = "Tech",
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(5583),
                            Description = "Tech Industry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExtractedInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BusinessStreamId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("Evidence")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("TaxCode")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStreamId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "39 Vo Chi Cong Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "Fpt Software",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(7896),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 1000,
                            WebsiteURL = "https://fpt.com/vi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "64 Le Van Si Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "High Tech",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(7916),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 50,
                            WebsiteURL = "https://fpt.com/vi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailContent = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Job Opportunity - ${CompanyName}</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n        }\r\n        .email-container {\r\n            width: 100%;\r\n            max-width: 600px;\r\n            margin: 0 auto;\r\n            border: 1px solid #e0e0e0;\r\n            padding: 20px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n        }\r\n        .header {\r\n            background-color: #af2e2f;\r\n            color: white;\r\n            padding: 10px;\r\n            text-align: center;\r\n        }\r\n        .header img {\r\n            max-width: 100px;\r\n        }\r\n        .content {\r\n            padding: 20px;\r\n            text-align: center;\r\n        }\r\n        .job-title {\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            color: #2b2b2b;\r\n        }\r\n        .job-details {\r\n            font-size: 14px;\r\n            color: #555;\r\n            margin: 10px 0;\r\n        }\r\n        .cta-button {\r\n            display: inline-block;\r\n            background-color: #d32f2f;\r\n            color: white;\r\n            padding: 10px 20px;\r\n            text-decoration: none;\r\n            border-radius: 5px;\r\n            margin-top: 15px;\r\n        }\r\n        .footer {\r\n            text-align: center;\r\n            font-size: 12px;\r\n            color: #999;\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"email-container\">\r\n        <div class=\"header\">\r\n            <p>Final Capstone</p>\r\n        </div>\r\n        <div class=\"content\">\r\n            <p>Hi ${Name},</p>\r\n            <p>Based on your subscription, our Job Robot found a new ${CompanyName} job for you.</p>\r\n            <p class=\"job-title\">${JobTitle}</p>\r\n            <p class=\"job-details\">\r\n                ${CompanyName} <br>\r\n                Java - Cloud - Spring\r\n            </p>\r\n            <a href=\"#\" class=\"cta-button\">More ${CompanyName} Jobs</a>\r\n        </div>\r\n        <div class=\"footer\">\r\n            <p>By engaging with this email, you agree to <a href=\"#\">Terms and Conditions</a> and <a href=\"#\">Privacy Policy</a>.</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>",
                            Name = "Job Opportunity Email"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("Domain.Entities.FollowCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowCompanys");
                });

            modelBuilder.Entity("Domain.Entities.FollowJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowJobs");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StressAddressDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("LocationId");

                    b.ToTable("JobLocations");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExperienceRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("JobPostReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QualificationRequired")
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<float[]>("VectorEmbedding")
                        .HasColumnType("real[]");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalyzedResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CvId")
                        .HasColumnType("integer");

                    b.Property<string>("CvName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExactedInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostActivities");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivityComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobPostActivityId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostActivityId");

                    b.ToTable("JobPostActivityComments");
                });

            modelBuilder.Entity("Domain.Entities.JobPostBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BenefitId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostBenefits");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Full Time Job",
                            Name = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Part Time Job",
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Remote Job",
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "HO CHI MINH"
                        },
                        new
                        {
                            Id = 2,
                            City = "HA NOI"
                        },
                        new
                        {
                            Id = 3,
                            City = "DA NANG"
                        },
                        new
                        {
                            Id = 4,
                            City = "HAI PHONG"
                        },
                        new
                        {
                            Id = 5,
                            City = "CAN THO"
                        },
                        new
                        {
                            Id = 6,
                            City = "NHA TRANG"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostActivityId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostActivityId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.SeekerBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BenefitId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerBenefits");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shorthand")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(932),
                            Description = "Business Analyst",
                            IsDeleted = false,
                            Name = "Business Analyst",
                            Shorthand = "BA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(936),
                            Description = "C#",
                            IsDeleted = false,
                            Name = "C#",
                            Shorthand = "C#"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(937),
                            Description = "Java Script",
                            IsDeleted = false,
                            Name = "Java Script",
                            Shorthand = "JS"
                        },
                        new
                        {
                            Id = 200,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(938),
                            IsDeleted = false,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 201,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(939),
                            IsDeleted = false,
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 202,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(939),
                            IsDeleted = false,
                            Name = "Bridge Engineer"
                        },
                        new
                        {
                            Id = 203,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(940),
                            IsDeleted = false,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 204,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(941),
                            IsDeleted = false,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 205,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(941),
                            IsDeleted = false,
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 206,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(942),
                            IsDeleted = false,
                            Name = "Magento"
                        },
                        new
                        {
                            Id = 207,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(943),
                            IsDeleted = false,
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 208,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(943),
                            IsDeleted = false,
                            Name = "NextJS"
                        },
                        new
                        {
                            Id = 209,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(944),
                            IsDeleted = false,
                            Name = "OOP"
                        },
                        new
                        {
                            Id = 210,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(945),
                            IsDeleted = false,
                            Name = "PQA"
                        },
                        new
                        {
                            Id = 211,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(945),
                            IsDeleted = false,
                            Name = "ReactJS"
                        },
                        new
                        {
                            Id = 212,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(946),
                            IsDeleted = false,
                            Name = "Solution Architect"
                        },
                        new
                        {
                            Id = 213,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(947),
                            IsDeleted = false,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 214,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(947),
                            IsDeleted = false,
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 215,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(948),
                            IsDeleted = false,
                            Name = "Agile"
                        },
                        new
                        {
                            Id = 216,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(949),
                            IsDeleted = false,
                            Name = "ASP.NET"
                        },
                        new
                        {
                            Id = 217,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(949),
                            IsDeleted = false,
                            Name = "Big Data"
                        },
                        new
                        {
                            Id = 218,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(950),
                            IsDeleted = false,
                            Name = "Cloud"
                        },
                        new
                        {
                            Id = 219,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(951),
                            IsDeleted = false,
                            Name = "Data Analyst"
                        },
                        new
                        {
                            Id = 220,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(951),
                            IsDeleted = false,
                            Name = "DevSecOps"
                        },
                        new
                        {
                            Id = 221,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(972),
                            IsDeleted = false,
                            Name = "HTML5"
                        },
                        new
                        {
                            Id = 222,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(973),
                            IsDeleted = false,
                            Name = "JQuery"
                        },
                        new
                        {
                            Id = 223,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 901, DateTimeKind.Utc).AddTicks(974),
                            IsDeleted = false,
                            Name = "SQL"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLookingForJob")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PremiumExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(4817),
                            Email = "User1@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "User1",
                            PasswordHash = new byte[] { 173, 61, 238, 50, 8, 142, 87, 188, 83, 87, 140, 175, 14, 159, 175, 14, 157, 212, 95, 227, 57, 132, 72, 198, 15, 67, 13, 219, 195, 39, 97, 86, 153, 237, 109, 58, 46, 135, 68, 215, 116, 219, 159, 158, 2, 250, 209, 26, 160, 6, 207, 67, 116, 253, 231, 252, 97, 154, 71, 144, 224, 113, 19, 96 },
                            PasswordSalt = new byte[] { 195, 21, 168, 138, 62, 250, 61, 23, 50, 89, 150, 68, 96, 95, 67, 229, 154, 132, 26, 132, 25, 71, 146, 58, 59, 179, 163, 223, 170, 218, 72, 252, 138, 18, 136, 40, 151, 111, 58, 252, 147, 93, 89, 126, 160, 237, 167, 164, 255, 28, 100, 38, 242, 215, 118, 107, 183, 33, 180, 28, 193, 187, 139, 107, 145, 32, 207, 195, 186, 213, 244, 201, 155, 55, 17, 68, 185, 127, 18, 94, 49, 101, 67, 61, 81, 208, 123, 209, 30, 246, 83, 103, 2, 175, 5, 139, 215, 184, 25, 68, 76, 99, 122, 79, 155, 109, 211, 171, 170, 148, 173, 25, 135, 239, 210, 43, 126, 234, 46, 250, 242, 55, 69, 133, 22, 50, 14, 28 },
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(4826),
                            Email = "User2@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "User2",
                            PasswordHash = new byte[] { 92, 56, 70, 178, 206, 255, 222, 195, 44, 246, 136, 76, 117, 43, 247, 225, 9, 127, 27, 41, 118, 107, 1, 141, 21, 12, 219, 200, 220, 218, 87, 182, 90, 131, 38, 197, 239, 197, 125, 206, 212, 93, 227, 13, 74, 2, 118, 191, 139, 21, 131, 44, 250, 25, 207, 145, 237, 163, 46, 59, 169, 93, 174, 131 },
                            PasswordSalt = new byte[] { 179, 109, 249, 211, 50, 62, 243, 44, 65, 1, 126, 209, 96, 217, 213, 21, 86, 94, 80, 106, 207, 227, 150, 248, 78, 15, 133, 120, 141, 67, 208, 54, 186, 203, 92, 197, 59, 62, 48, 150, 212, 198, 23, 145, 97, 222, 147, 162, 234, 231, 92, 29, 16, 120, 74, 202, 131, 70, 121, 173, 247, 122, 207, 222, 158, 48, 21, 25, 173, 5, 15, 238, 192, 219, 186, 58, 69, 245, 157, 71, 246, 148, 250, 36, 109, 220, 101, 71, 47, 67, 56, 175, 147, 24, 138, 102, 12, 235, 171, 35, 226, 29, 94, 188, 227, 179, 236, 184, 34, 137, 179, 124, 55, 151, 212, 226, 255, 34, 69, 45, 10, 115, 29, 228, 74, 135, 106, 134 },
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(4828),
                            Email = "Employer@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "Employer",
                            PasswordHash = new byte[] { 148, 167, 43, 107, 99, 114, 13, 248, 213, 190, 140, 1, 160, 241, 223, 144, 240, 71, 84, 172, 57, 182, 72, 134, 55, 182, 25, 147, 182, 85, 40, 147, 77, 222, 177, 208, 170, 192, 60, 12, 216, 69, 105, 226, 160, 49, 16, 163, 200, 210, 229, 113, 230, 80, 119, 199, 250, 182, 155, 39, 143, 204, 221, 136 },
                            PasswordSalt = new byte[] { 131, 119, 52, 128, 203, 155, 223, 232, 88, 195, 143, 189, 133, 228, 47, 44, 39, 179, 186, 181, 95, 12, 121, 11, 170, 15, 231, 44, 135, 80, 223, 105, 40, 173, 1, 178, 81, 81, 3, 180, 79, 174, 44, 127, 210, 238, 215, 161, 202, 246, 198, 84, 60, 52, 248, 139, 148, 231, 207, 61, 41, 61, 192, 241, 191, 232, 248, 248, 42, 145, 209, 197, 249, 7, 110, 116, 1, 107, 28, 143, 195, 43, 88, 208, 61, 157, 236, 207, 4, 221, 50, 216, 24, 170, 219, 161, 213, 221, 43, 105, 163, 14, 113, 185, 222, 237, 82, 241, 175, 243, 198, 66, 75, 219, 64, 127, 73, 41, 90, 173, 241, 191, 117, 103, 149, 118, 237, 25 },
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 21, 2, 55, 27, 899, DateTimeKind.Utc).AddTicks(4830),
                            Email = "Admin@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 131, 167, 109, 97, 68, 153, 134, 198, 123, 82, 48, 189, 224, 215, 48, 160, 22, 146, 163, 152, 223, 9, 78, 207, 26, 176, 234, 207, 105, 187, 158, 113, 182, 130, 226, 129, 228, 139, 17, 45, 24, 94, 226, 14, 105, 206, 51, 189, 136, 230, 178, 100, 248, 220, 32, 116, 220, 244, 140, 72, 196, 165, 177, 32 },
                            PasswordSalt = new byte[] { 31, 48, 158, 70, 243, 46, 195, 238, 117, 115, 83, 94, 63, 226, 70, 144, 44, 41, 235, 112, 247, 66, 209, 134, 123, 53, 0, 123, 46, 17, 17, 83, 177, 170, 148, 41, 118, 248, 169, 205, 140, 135, 177, 199, 24, 5, 70, 57, 177, 99, 163, 47, 227, 189, 12, 87, 241, 166, 177, 173, 73, 13, 150, 214, 4, 135, 255, 118, 128, 155, 201, 116, 168, 243, 94, 253, 108, 128, 245, 132, 47, 36, 255, 190, 187, 158, 43, 19, 19, 98, 4, 122, 216, 132, 150, 91, 48, 101, 70, 8, 121, 100, 114, 152, 94, 30, 220, 103, 196, 203, 105, 51, 196, 79, 169, 59, 147, 246, 192, 162, 227, 10, 157, 66, 175, 126, 0, 248 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserJobAlertCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JobTile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinSalary")
                        .HasColumnType("numeric");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("CVs")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.BusinessStream", "BusinessStream")
                        .WithMany("Companys")
                        .HasForeignKey("BusinessStreamId");

                    b.Navigation("BusinessStream");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("EducationDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.EmailVerification", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "User")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.FollowCompany", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("FollowCompanys")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("FollowCompanys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.FollowJob", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("FollowJobs")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("FollowJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("JobLocations")
                        .HasForeignKey("LocationId");

                    b.Navigation("JobPost");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("JobType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.HasOne("Domain.Entities.CV", "CV")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("CvId");

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("UserId");

                    b.Navigation("CV");

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivityComment", b =>
                {
                    b.HasOne("Domain.Entities.JobPostActivity", "JobPostActivity")
                        .WithMany("JobPostActivityComments")
                        .HasForeignKey("JobPostActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPostActivity");
                });

            modelBuilder.Entity("Domain.Entities.JobPostBenefit", b =>
                {
                    b.HasOne("Domain.Entities.Benefit", "Benefit")
                        .WithMany("JobPostBenefits")
                        .HasForeignKey("BenefitId");

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostBenefits")
                        .HasForeignKey("JobPostId");

                    b.Navigation("Benefit");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.Navigation("JobPost");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.JobPostActivity", "JobPostActivity")
                        .WithMany("Notifications")
                        .HasForeignKey("JobPostActivityId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPostActivity");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerBenefit", b =>
                {
                    b.HasOne("Domain.Entities.Benefit", "Benefit")
                        .WithMany("SeekerBenefits")
                        .HasForeignKey("BenefitId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerBenefits")
                        .HasForeignKey("UserId");

                    b.Navigation("Benefit");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("UserId");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("UserAccounts")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.UserJobAlertCriteria", b =>
                {
                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("LocationId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("UserId");

                    b.Navigation("JobType");

                    b.Navigation("Location");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Benefit", b =>
                {
                    b.Navigation("JobPostBenefits");

                    b.Navigation("SeekerBenefits");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Navigation("JobPostActivitys");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("EmailVerifications");

                    b.Navigation("FollowCompanys");

                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Navigation("FollowJobs");

                    b.Navigation("JobLocations");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPostBenefits");

                    b.Navigation("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Navigation("JobPostActivityComments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Navigation("JobLocations");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Navigation("JobSkillSets");

                    b.Navigation("SeekerSkillSets");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("CVs");

                    b.Navigation("EducationDetails");

                    b.Navigation("EmailVerifications");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("FollowCompanys");

                    b.Navigation("FollowJobs");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPosts");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("SeekerBenefits");

                    b.Navigation("SeekerSkillSets");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserJobAlertCriterias");
                });
#pragma warning restore 612, 618
        }
    }
}
