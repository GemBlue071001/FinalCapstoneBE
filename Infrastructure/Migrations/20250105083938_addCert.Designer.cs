// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250105083938_addCert")]
    partial class addCert
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AwardOrganization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Domain.Entities.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessStreamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessStreams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessStreamName = "Tech",
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 219, DateTimeKind.Utc).AddTicks(7785),
                            Description = "Tech Industry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExtractedInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CertificateOrganization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CertificateURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BusinessStreamId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("Evidence")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("TaxCode")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStreamId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "39 Vo Chi Cong Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "Fpt Software",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 220, DateTimeKind.Utc).AddTicks(2625),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 1000,
                            WebsiteURL = "https://fpt.com/vi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "64 Le Van Si Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "High Tech",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 220, DateTimeKind.Utc).AddTicks(2633),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 50,
                            WebsiteURL = "https://fpt.com/vi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CompanyLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("StressAddressDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("CompanyLocations");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailContent = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Job Opportunity - ${CompanyName}</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n        }\r\n        .email-container {\r\n            width: 100%;\r\n            max-width: 600px;\r\n            margin: 0 auto;\r\n            border: 1px solid #e0e0e0;\r\n            padding: 20px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n        }\r\n        .header {\r\n            background-color: #af2e2f;\r\n            color: white;\r\n            padding: 10px;\r\n            text-align: center;\r\n        }\r\n        .header img {\r\n            max-width: 100px;\r\n        }\r\n        .content {\r\n            padding: 20px;\r\n            text-align: center;\r\n        }\r\n        .job-title {\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            color: #2b2b2b;\r\n        }\r\n        .job-details {\r\n            font-size: 14px;\r\n            color: #555;\r\n            margin: 10px 0;\r\n        }\r\n        .cta-button {\r\n            display: inline-block;\r\n            background-color: #d32f2f;\r\n            color: white;\r\n            padding: 10px 20px;\r\n            text-decoration: none;\r\n            border-radius: 5px;\r\n            margin-top: 15px;\r\n        }\r\n        .footer {\r\n            text-align: center;\r\n            font-size: 12px;\r\n            color: #999;\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"email-container\">\r\n        <div class=\"header\">\r\n            <p>Final Capstone</p>\r\n        </div>\r\n        <div class=\"content\">\r\n            <p>Hi ${Name},</p>\r\n            <p>Based on your subscription, our Job Robot found a new ${CompanyName} job for you.</p>\r\n            <p class=\"job-title\">${JobTitle}</p>\r\n            <p class=\"job-details\">\r\n                ${CompanyName} <br>\r\n                Java - Cloud - Spring\r\n            </p>\r\n            <a href=\"#\" class=\"cta-button\">More ${CompanyName} Jobs</a>\r\n        </div>\r\n        <div class=\"footer\">\r\n            <p>By engaging with this email, you agree to <a href=\"#\">Terms and Conditions</a> and <a href=\"#\">Privacy Policy</a>.</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>",
                            Name = "Job Opportunity Email"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("Domain.Entities.FollowCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowCompanys");
                });

            modelBuilder.Entity("Domain.Entities.FollowJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowJobs");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StressAddressDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("LocationId");

                    b.ToTable("JobLocations");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExperienceRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsHot")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("JobPostReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Minsalary")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QualificationRequired")
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<float[]>("VectorEmbedding")
                        .HasColumnType("real[]");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalyzedResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CvId")
                        .HasColumnType("integer");

                    b.Property<string>("CvName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExactedInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostActivities");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivityComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobPostActivityId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostActivityId");

                    b.ToTable("JobPostActivityComments");
                });

            modelBuilder.Entity("Domain.Entities.JobPostBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BenefitId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostBenefits");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Full Time Job",
                            Name = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Part Time Job",
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Remote Job",
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "HO CHI MINH"
                        },
                        new
                        {
                            Id = 2,
                            City = "HA NOI"
                        },
                        new
                        {
                            Id = 3,
                            City = "DA NANG"
                        },
                        new
                        {
                            Id = 4,
                            City = "HAI PHONG"
                        },
                        new
                        {
                            Id = 5,
                            City = "CAN THO"
                        },
                        new
                        {
                            Id = 6,
                            City = "NHA TRANG"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostActivityId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostActivityId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CareRating")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureRating")
                        .HasColumnType("integer");

                    b.Property<string>("ExperienceContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OfficeRating")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReasonToReject")
                        .HasColumnType("text");

                    b.Property<bool>("Recommened")
                        .HasColumnType("boolean");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<int>("SalaryRating")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestionContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SummaryContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrainingRating")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.SeekerBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BenefitId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerBenefits");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPost")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool?>("isHot")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shorthand")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7332),
                            Description = "Business Analyst",
                            IsDeleted = false,
                            Name = "Business Analyst",
                            Shorthand = "BA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7337),
                            Description = "C#",
                            IsDeleted = false,
                            Name = "C#",
                            Shorthand = "C#"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7339),
                            Description = "Java Script",
                            IsDeleted = false,
                            Name = "Java Script",
                            Shorthand = "JS"
                        },
                        new
                        {
                            Id = 200,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7340),
                            IsDeleted = false,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 201,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7341),
                            IsDeleted = false,
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 202,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7342),
                            IsDeleted = false,
                            Name = "Bridge Engineer"
                        },
                        new
                        {
                            Id = 203,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7343),
                            IsDeleted = false,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 204,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7344),
                            IsDeleted = false,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 205,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7344),
                            IsDeleted = false,
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 206,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7345),
                            IsDeleted = false,
                            Name = "Magento"
                        },
                        new
                        {
                            Id = 207,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7346),
                            IsDeleted = false,
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 208,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7347),
                            IsDeleted = false,
                            Name = "NextJS"
                        },
                        new
                        {
                            Id = 209,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7348),
                            IsDeleted = false,
                            Name = "OOP"
                        },
                        new
                        {
                            Id = 210,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7349),
                            IsDeleted = false,
                            Name = "PQA"
                        },
                        new
                        {
                            Id = 211,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7349),
                            IsDeleted = false,
                            Name = "ReactJS"
                        },
                        new
                        {
                            Id = 212,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7350),
                            IsDeleted = false,
                            Name = "Solution Architect"
                        },
                        new
                        {
                            Id = 213,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7351),
                            IsDeleted = false,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 214,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7352),
                            IsDeleted = false,
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 215,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7353),
                            IsDeleted = false,
                            Name = "Agile"
                        },
                        new
                        {
                            Id = 216,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7354),
                            IsDeleted = false,
                            Name = "ASP.NET"
                        },
                        new
                        {
                            Id = 217,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7354),
                            IsDeleted = false,
                            Name = "Big Data"
                        },
                        new
                        {
                            Id = 218,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7355),
                            IsDeleted = false,
                            Name = "Cloud"
                        },
                        new
                        {
                            Id = 219,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7356),
                            IsDeleted = false,
                            Name = "Data Analyst"
                        },
                        new
                        {
                            Id = 220,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7357),
                            IsDeleted = false,
                            Name = "DevSecOps"
                        },
                        new
                        {
                            Id = 221,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7358),
                            IsDeleted = false,
                            Name = "HTML5"
                        },
                        new
                        {
                            Id = 222,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7359),
                            IsDeleted = false,
                            Name = "JQuery"
                        },
                        new
                        {
                            Id = 223,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 222, DateTimeKind.Utc).AddTicks(7359),
                            IsDeleted = false,
                            Name = "SQL"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLookingForJob")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("NumberOFPostLeft")
                        .HasColumnType("integer");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PremiumExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 219, DateTimeKind.Utc).AddTicks(6154),
                            Email = "User1@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "User1",
                            PasswordHash = new byte[] { 161, 217, 157, 60, 114, 81, 201, 157, 228, 13, 104, 36, 24, 1, 172, 87, 252, 150, 61, 146, 88, 66, 47, 171, 173, 139, 106, 169, 40, 200, 27, 33, 52, 3, 172, 177, 25, 5, 13, 157, 152, 106, 31, 185, 23, 20, 28, 164, 3, 58, 60, 110, 119, 154, 6, 170, 132, 173, 218, 36, 64, 122, 88, 50 },
                            PasswordSalt = new byte[] { 112, 64, 54, 141, 38, 95, 42, 149, 13, 123, 130, 210, 99, 66, 211, 208, 65, 64, 201, 78, 120, 75, 161, 59, 236, 61, 20, 68, 43, 113, 152, 199, 46, 100, 11, 73, 140, 245, 176, 118, 220, 246, 59, 102, 53, 158, 164, 65, 126, 14, 62, 213, 45, 194, 37, 246, 17, 180, 63, 43, 156, 78, 110, 185, 37, 206, 205, 71, 240, 247, 168, 27, 141, 190, 49, 49, 213, 70, 192, 123, 64, 175, 150, 108, 98, 44, 183, 145, 119, 20, 173, 184, 147, 120, 153, 152, 225, 236, 87, 227, 69, 204, 27, 40, 147, 28, 135, 111, 239, 136, 77, 13, 219, 67, 193, 29, 135, 191, 121, 228, 4, 36, 97, 37, 185, 213, 115, 67 },
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 219, DateTimeKind.Utc).AddTicks(6162),
                            Email = "User2@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "User2",
                            PasswordHash = new byte[] { 82, 85, 77, 206, 232, 104, 85, 176, 82, 159, 58, 158, 217, 148, 126, 130, 92, 162, 225, 53, 245, 107, 243, 56, 173, 35, 45, 79, 108, 94, 119, 37, 142, 37, 19, 76, 168, 67, 234, 78, 30, 45, 207, 181, 239, 174, 227, 19, 48, 69, 113, 124, 46, 187, 56, 165, 120, 40, 211, 57, 0, 248, 153, 203 },
                            PasswordSalt = new byte[] { 122, 229, 92, 169, 246, 34, 28, 85, 112, 103, 40, 199, 66, 103, 21, 131, 72, 118, 144, 131, 115, 176, 120, 66, 67, 17, 147, 126, 127, 181, 226, 184, 166, 148, 33, 13, 118, 171, 17, 181, 159, 57, 250, 70, 193, 107, 168, 164, 132, 8, 204, 162, 169, 107, 197, 134, 47, 24, 195, 231, 246, 165, 150, 130, 98, 131, 121, 248, 128, 9, 216, 139, 229, 24, 41, 6, 144, 222, 203, 79, 16, 174, 248, 60, 64, 255, 17, 27, 62, 224, 31, 250, 137, 58, 10, 141, 52, 83, 96, 40, 246, 221, 46, 29, 84, 0, 164, 2, 35, 25, 110, 2, 36, 17, 30, 88, 162, 128, 133, 166, 164, 10, 216, 89, 152, 191, 104, 48 },
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 219, DateTimeKind.Utc).AddTicks(6164),
                            Email = "Employer@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "Employer",
                            PasswordHash = new byte[] { 162, 121, 224, 30, 13, 128, 90, 131, 110, 225, 107, 127, 70, 150, 216, 202, 174, 153, 232, 156, 142, 94, 174, 105, 97, 51, 91, 17, 113, 149, 219, 216, 96, 132, 99, 186, 66, 76, 103, 142, 93, 194, 52, 223, 156, 222, 38, 215, 221, 102, 253, 243, 55, 192, 212, 94, 149, 60, 33, 171, 45, 239, 222, 76 },
                            PasswordSalt = new byte[] { 92, 232, 244, 137, 132, 171, 57, 199, 215, 254, 249, 177, 224, 241, 58, 205, 98, 239, 161, 251, 193, 97, 163, 105, 219, 149, 159, 18, 172, 28, 16, 74, 1, 47, 64, 246, 79, 228, 133, 39, 37, 176, 94, 135, 107, 174, 6, 37, 20, 175, 147, 222, 180, 98, 38, 20, 181, 197, 120, 26, 11, 25, 142, 67, 108, 135, 95, 55, 88, 122, 18, 180, 248, 97, 115, 239, 148, 16, 193, 42, 0, 185, 63, 87, 244, 134, 38, 147, 171, 157, 205, 238, 250, 223, 91, 203, 163, 78, 152, 189, 117, 83, 123, 236, 108, 24, 194, 219, 93, 28, 60, 52, 93, 75, 85, 234, 240, 111, 76, 8, 187, 136, 184, 220, 209, 189, 159, 147 },
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 1, 5, 8, 39, 36, 219, DateTimeKind.Utc).AddTicks(6166),
                            Email = "Admin@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 247, 224, 165, 129, 152, 73, 200, 0, 215, 153, 194, 11, 62, 191, 22, 120, 155, 41, 33, 195, 156, 249, 145, 103, 193, 190, 30, 243, 153, 53, 30, 2, 157, 236, 193, 84, 246, 123, 135, 70, 88, 215, 143, 210, 214, 11, 128, 100, 160, 112, 59, 211, 142, 28, 206, 135, 18, 108, 207, 4, 223, 216, 214, 71 },
                            PasswordSalt = new byte[] { 120, 172, 191, 75, 189, 195, 33, 8, 128, 189, 176, 46, 252, 5, 181, 102, 255, 81, 61, 91, 31, 73, 125, 196, 130, 13, 65, 242, 181, 234, 34, 49, 218, 102, 76, 151, 209, 112, 213, 84, 107, 145, 68, 198, 110, 225, 157, 39, 186, 58, 56, 185, 75, 170, 244, 159, 247, 214, 62, 104, 231, 62, 193, 217, 79, 164, 64, 215, 180, 217, 92, 69, 182, 106, 168, 70, 21, 42, 99, 0, 59, 200, 242, 64, 95, 121, 27, 36, 213, 167, 142, 55, 123, 192, 9, 6, 83, 113, 64, 118, 102, 163, 214, 32, 121, 111, 84, 13, 222, 204, 238, 141, 207, 176, 240, 24, 20, 147, 185, 31, 47, 165, 223, 232, 8, 129, 42, 217 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserAccountService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfPostLeft")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServices");
                });

            modelBuilder.Entity("Domain.Entities.UserJobAlertCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JobTile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinSalary")
                        .HasColumnType("numeric");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.Award", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Awards")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("CVs")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Certificate", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.BusinessStream", "BusinessStream")
                        .WithMany("Companys")
                        .HasForeignKey("BusinessStreamId");

                    b.Navigation("BusinessStream");
                });

            modelBuilder.Entity("Domain.Entities.CompanyLocation", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("LocationId");

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("EducationDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.EmailVerification", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "User")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.FollowCompany", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("FollowCompanys")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("FollowCompanys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.FollowJob", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("FollowJobs")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("FollowJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("JobLocations")
                        .HasForeignKey("LocationId");

                    b.Navigation("JobPost");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("JobType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.HasOne("Domain.Entities.CV", "CV")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("CvId");

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("UserId");

                    b.Navigation("CV");

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivityComment", b =>
                {
                    b.HasOne("Domain.Entities.JobPostActivity", "JobPostActivity")
                        .WithMany("JobPostActivityComments")
                        .HasForeignKey("JobPostActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPostActivity");
                });

            modelBuilder.Entity("Domain.Entities.JobPostBenefit", b =>
                {
                    b.HasOne("Domain.Entities.Benefit", "Benefit")
                        .WithMany("JobPostBenefits")
                        .HasForeignKey("BenefitId");

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostBenefits")
                        .HasForeignKey("JobPostId");

                    b.Navigation("Benefit");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.Navigation("JobPost");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.JobPostActivity", "JobPostActivity")
                        .WithMany("Notifications")
                        .HasForeignKey("JobPostActivityId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPostActivity");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerBenefit", b =>
                {
                    b.HasOne("Domain.Entities.Benefit", "Benefit")
                        .WithMany("SeekerBenefits")
                        .HasForeignKey("BenefitId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerBenefits")
                        .HasForeignKey("UserId");

                    b.Navigation("Benefit");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("UserId");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("UserAccounts")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.UserAccountService", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("UserServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.UserJobAlertCriteria", b =>
                {
                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("LocationId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("UserId");

                    b.Navigation("JobType");

                    b.Navigation("Location");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Benefit", b =>
                {
                    b.Navigation("JobPostBenefits");

                    b.Navigation("SeekerBenefits");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Navigation("JobPostActivitys");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("CompanyLocations");

                    b.Navigation("EmailVerifications");

                    b.Navigation("FollowCompanys");

                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Navigation("FollowJobs");

                    b.Navigation("JobLocations");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPostBenefits");

                    b.Navigation("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Navigation("JobPostActivityComments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Navigation("CompanyLocations");

                    b.Navigation("JobLocations");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("UserServices");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Navigation("JobSkillSets");

                    b.Navigation("SeekerSkillSets");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("CVs");

                    b.Navigation("Certificates");

                    b.Navigation("EducationDetails");

                    b.Navigation("EmailVerifications");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("FollowCompanys");

                    b.Navigation("FollowJobs");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPosts");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("SeekerBenefits");

                    b.Navigation("SeekerSkillSets");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserJobAlertCriterias");

                    b.Navigation("UserServices");
                });
#pragma warning restore 612, 618
        }
    }
}
