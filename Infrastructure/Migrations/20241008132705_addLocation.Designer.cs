// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241008132705_addLocation")]
    partial class addLocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessStreamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessStreams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessStreamName = "Tech",
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(6644),
                            Description = "Tech Industry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BusinessStreamId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStreamId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "39 Vo Chi Cong Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "Fpt Software",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(7926),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 1000,
                            WebsiteURL = "https://fpt.com/vi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "64 Le Van Si Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "High Tech",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(7931),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 50,
                            WebsiteURL = "https://fpt.com/vi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StressAddressDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("LocationId");

                    b.ToTable("JobLocations");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperienceRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualificationRequired")
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int>("SkillLevelRequired")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CvId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostActivities");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Full Time Job",
                            Name = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Part Time Job",
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Remote Job",
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shorthand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 510, DateTimeKind.Utc).AddTicks(7092),
                            Description = "Business Analyst",
                            IsDeleted = false,
                            Name = "Business Analyst",
                            Shorthand = "BA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 510, DateTimeKind.Utc).AddTicks(7094),
                            Description = "C#",
                            IsDeleted = false,
                            Name = "C#",
                            Shorthand = "C#"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 510, DateTimeKind.Utc).AddTicks(7096),
                            Description = "Java Script",
                            IsDeleted = false,
                            Name = "Java Script",
                            Shorthand = "JS"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(6109),
                            Email = "User1@gmail.com",
                            IsDeleted = false,
                            LastName = "User1",
                            PasswordHash = new byte[] { 203, 63, 243, 219, 110, 252, 118, 100, 59, 177, 158, 247, 115, 151, 81, 165, 79, 22, 85, 16, 12, 79, 167, 184, 233, 95, 217, 220, 176, 31, 184, 35, 159, 205, 228, 117, 8, 234, 27, 30, 227, 152, 205, 24, 188, 181, 13, 195, 74, 169, 103, 78, 254, 103, 31, 202, 36, 65, 62, 104, 108, 249, 33, 109 },
                            PasswordSalt = new byte[] { 95, 125, 165, 155, 0, 1, 238, 42, 247, 41, 22, 112, 225, 27, 219, 179, 183, 21, 87, 111, 74, 204, 229, 124, 106, 211, 230, 114, 239, 107, 128, 147, 206, 38, 93, 174, 163, 249, 74, 233, 176, 146, 78, 215, 176, 157, 81, 16, 213, 17, 181, 61, 63, 103, 103, 105, 38, 10, 43, 144, 229, 5, 81, 245, 87, 0, 243, 182, 168, 0, 116, 72, 96, 96, 81, 154, 53, 15, 189, 137, 250, 208, 192, 24, 23, 250, 236, 134, 121, 116, 136, 10, 177, 171, 90, 213, 53, 118, 66, 97, 27, 26, 24, 60, 89, 144, 29, 119, 199, 221, 233, 33, 8, 31, 219, 71, 13, 37, 56, 124, 132, 68, 116, 230, 213, 95, 198, 236 },
                            Role = 0,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(6118),
                            Email = "User2@gmail.com",
                            IsDeleted = false,
                            LastName = "User2",
                            PasswordHash = new byte[] { 3, 182, 221, 166, 220, 142, 178, 161, 120, 184, 161, 238, 130, 82, 104, 110, 11, 132, 46, 138, 246, 109, 166, 198, 3, 216, 244, 50, 252, 69, 179, 160, 133, 249, 2, 1, 166, 98, 34, 153, 174, 209, 58, 144, 110, 249, 1, 213, 193, 125, 203, 68, 38, 189, 165, 121, 84, 103, 58, 58, 231, 31, 214, 176 },
                            PasswordSalt = new byte[] { 145, 219, 117, 30, 98, 167, 191, 219, 190, 25, 111, 131, 241, 247, 215, 122, 140, 33, 211, 86, 29, 76, 206, 28, 169, 100, 197, 201, 5, 112, 206, 14, 77, 125, 10, 155, 61, 93, 169, 187, 6, 93, 185, 32, 185, 28, 211, 228, 82, 89, 227, 3, 232, 168, 179, 231, 178, 242, 31, 140, 52, 134, 207, 221, 179, 53, 88, 23, 50, 186, 8, 240, 169, 126, 191, 153, 242, 39, 127, 3, 75, 188, 45, 25, 221, 95, 177, 186, 26, 87, 178, 250, 89, 253, 220, 120, 166, 247, 195, 222, 191, 196, 50, 161, 37, 143, 109, 25, 42, 73, 110, 190, 91, 206, 50, 191, 197, 22, 51, 100, 119, 146, 97, 142, 61, 24, 137, 163 },
                            Role = 0,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(6120),
                            Email = "Employer@gmail.com",
                            IsDeleted = false,
                            LastName = "Employer",
                            PasswordHash = new byte[] { 33, 228, 68, 102, 219, 185, 128, 158, 23, 99, 91, 185, 144, 77, 206, 3, 99, 9, 91, 67, 31, 227, 81, 138, 217, 137, 112, 18, 74, 250, 111, 175, 8, 105, 172, 253, 8, 130, 148, 173, 18, 105, 129, 233, 107, 52, 90, 229, 1, 79, 189, 233, 216, 73, 210, 66, 162, 195, 87, 222, 158, 42, 17, 177 },
                            PasswordSalt = new byte[] { 30, 203, 34, 106, 116, 113, 4, 193, 55, 71, 208, 152, 172, 250, 123, 163, 149, 97, 220, 120, 198, 97, 33, 72, 146, 72, 130, 159, 247, 11, 138, 178, 211, 221, 150, 67, 150, 9, 32, 46, 191, 26, 119, 207, 88, 242, 10, 252, 201, 34, 228, 184, 253, 151, 254, 142, 146, 69, 39, 8, 98, 85, 40, 245, 49, 35, 88, 65, 228, 145, 255, 77, 252, 16, 162, 177, 108, 247, 235, 40, 68, 161, 182, 169, 158, 168, 108, 3, 214, 15, 254, 172, 246, 102, 121, 221, 216, 194, 63, 148, 204, 156, 193, 223, 120, 62, 16, 111, 23, 134, 180, 27, 110, 234, 168, 50, 98, 153, 183, 42, 81, 239, 89, 60, 10, 149, 223, 249 },
                            Role = 1,
                            UserName = "Employer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 10, 8, 13, 27, 5, 509, DateTimeKind.Utc).AddTicks(6121),
                            Email = "Admin@gmail.com",
                            IsDeleted = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 140, 4, 28, 141, 124, 86, 123, 139, 22, 206, 121, 63, 66, 119, 19, 155, 28, 123, 244, 237, 62, 106, 134, 17, 16, 138, 7, 92, 129, 232, 163, 42, 5, 103, 185, 118, 212, 188, 135, 174, 93, 195, 83, 182, 176, 5, 67, 150, 4, 37, 211, 215, 95, 49, 218, 190, 94, 135, 50, 1, 137, 238, 19, 118 },
                            PasswordSalt = new byte[] { 219, 25, 57, 25, 69, 222, 193, 94, 132, 210, 36, 42, 66, 7, 77, 207, 159, 14, 8, 0, 21, 97, 100, 12, 49, 23, 205, 36, 56, 46, 34, 10, 131, 130, 38, 5, 36, 31, 156, 197, 170, 13, 79, 95, 54, 164, 48, 93, 78, 75, 161, 76, 95, 24, 203, 234, 171, 244, 4, 202, 80, 190, 202, 185, 9, 64, 25, 8, 29, 113, 127, 200, 41, 16, 176, 146, 62, 140, 233, 3, 125, 34, 253, 178, 191, 225, 139, 143, 177, 237, 9, 48, 153, 118, 154, 118, 138, 149, 194, 89, 5, 180, 36, 140, 11, 164, 110, 188, 106, 206, 195, 185, 127, 226, 99, 112, 107, 8, 205, 168, 233, 120, 57, 8, 216, 163, 224, 197 },
                            Role = 2,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("CVs")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.BusinessStream", "BusinessStream")
                        .WithMany("Companys")
                        .HasForeignKey("BusinessStreamId");

                    b.Navigation("BusinessStream");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("EducationDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("JobLocations")
                        .HasForeignKey("LocationId");

                    b.Navigation("JobPost");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("JobType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.HasOne("Domain.Entities.CV", "CV")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("CvId");

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("UserId");

                    b.Navigation("CV");

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.Navigation("JobPost");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("UserId");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("UserAccounts")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Navigation("JobPostActivitys");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Navigation("JobLocations");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Navigation("JobLocations");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Navigation("JobSkillSets");

                    b.Navigation("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("CVs");

                    b.Navigation("EducationDetails");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("SeekerSkillSets");
                });
#pragma warning restore 612, 618
        }
    }
}
