// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240614153515_addBaseToTP")]
    partial class addBaseToTP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("JobId");

                    b.ToTable("CampaignJobs");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CampaignJobId")
                        .HasColumnType("integer");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignJobId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalMember")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.JobTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("JobId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("JobTrainingProgram");
                });

            modelBuilder.Entity("Domain.Entities.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseObject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OutputObject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrainingProgram");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignJobId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignJobId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "HRAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "HRAccount",
                            PasswordHash = new byte[] { 18, 12, 101, 46, 94, 157, 58, 197, 17, 77, 118, 88, 171, 98, 25, 44, 181, 96, 191, 107, 237, 66, 236, 42, 213, 186, 166, 223, 2, 160, 91, 84, 122, 33, 222, 109, 155, 252, 209, 21, 143, 72, 80, 134, 227, 136, 136, 123, 131, 56, 194, 7, 242, 67, 238, 192, 105, 191, 198, 91, 149, 252, 67, 99 },
                            PasswordSalt = new byte[] { 129, 12, 15, 109, 252, 92, 64, 35, 221, 32, 173, 136, 122, 145, 4, 229, 218, 77, 109, 235, 24, 235, 24, 248, 13, 13, 194, 65, 14, 198, 17, 227, 211, 101, 170, 120, 213, 28, 3, 34, 249, 203, 204, 58, 227, 219, 18, 54, 63, 165, 92, 189, 222, 214, 30, 209, 13, 161, 75, 45, 25, 145, 193, 186, 226, 232, 161, 187, 107, 140, 148, 179, 198, 132, 89, 239, 34, 167, 180, 193, 243, 61, 84, 243, 185, 147, 234, 250, 32, 220, 217, 126, 219, 167, 195, 188, 14, 153, 217, 216, 178, 150, 190, 16, 236, 210, 224, 149, 248, 125, 145, 239, 157, 86, 35, 236, 186, 46, 39, 247, 92, 134, 153, 188, 253, 93, 99, 88 },
                            Role = 3,
                            UserName = "HRAccount"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ICAccountt@gmail.com",
                            IsDeleted = false,
                            LastName = "ICAccount",
                            PasswordHash = new byte[] { 168, 42, 92, 218, 109, 44, 198, 117, 146, 232, 47, 92, 154, 98, 186, 71, 159, 75, 63, 139, 24, 158, 32, 9, 185, 95, 104, 120, 140, 107, 60, 252, 106, 253, 164, 109, 159, 168, 82, 24, 91, 98, 116, 34, 242, 31, 231, 65, 160, 106, 46, 146, 58, 19, 127, 185, 23, 237, 117, 195, 160, 124, 74, 74 },
                            PasswordSalt = new byte[] { 81, 136, 155, 216, 198, 241, 225, 34, 25, 110, 220, 220, 243, 204, 94, 89, 206, 235, 92, 198, 188, 205, 198, 143, 155, 127, 194, 25, 83, 147, 42, 62, 35, 184, 227, 193, 205, 138, 64, 249, 8, 67, 57, 25, 176, 31, 141, 136, 76, 165, 241, 175, 93, 237, 118, 144, 218, 145, 3, 160, 88, 205, 88, 157, 131, 115, 92, 115, 114, 183, 63, 39, 174, 35, 107, 12, 243, 138, 141, 57, 82, 146, 15, 47, 165, 80, 32, 185, 106, 200, 106, 206, 216, 11, 150, 67, 247, 195, 65, 120, 243, 238, 1, 92, 63, 207, 163, 65, 160, 109, 55, 176, 104, 121, 132, 202, 201, 59, 76, 212, 16, 98, 128, 117, 22, 238, 121, 40 },
                            Role = 2,
                            UserName = "ICAccount"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mentorAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "mentorAccount",
                            PasswordHash = new byte[] { 16, 179, 22, 188, 208, 86, 112, 166, 182, 112, 42, 202, 0, 141, 46, 18, 251, 116, 53, 88, 2, 233, 185, 123, 141, 118, 175, 154, 1, 21, 203, 163, 14, 232, 121, 175, 7, 173, 0, 123, 248, 136, 252, 18, 52, 50, 186, 53, 177, 89, 253, 161, 112, 190, 113, 142, 63, 63, 214, 120, 172, 22, 161, 105 },
                            PasswordSalt = new byte[] { 33, 76, 79, 27, 30, 86, 127, 67, 71, 165, 162, 48, 159, 146, 38, 52, 58, 100, 60, 225, 222, 78, 149, 11, 107, 211, 55, 175, 208, 58, 193, 48, 106, 148, 245, 164, 179, 127, 239, 44, 198, 147, 217, 49, 208, 123, 30, 160, 205, 103, 224, 195, 157, 107, 2, 178, 250, 125, 248, 17, 204, 138, 251, 9, 199, 32, 111, 196, 133, 208, 71, 111, 203, 65, 125, 178, 125, 239, 179, 13, 170, 180, 15, 239, 31, 42, 34, 129, 209, 151, 144, 65, 31, 30, 89, 108, 7, 53, 249, 170, 114, 151, 175, 213, 234, 0, 171, 31, 191, 133, 45, 115, 127, 144, 92, 87, 211, 67, 32, 46, 134, 90, 198, 19, 43, 215, 93, 70 },
                            Role = 1,
                            UserName = "mentorAccount"
                        },
                        new
                        {
                            Id = 4,
                            Email = "InternAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "InternAccount",
                            PasswordHash = new byte[] { 153, 50, 37, 200, 40, 169, 240, 25, 223, 140, 55, 142, 197, 37, 46, 64, 180, 33, 205, 30, 187, 40, 5, 231, 48, 85, 119, 49, 232, 52, 34, 233, 133, 84, 230, 78, 46, 123, 234, 184, 24, 121, 82, 59, 242, 103, 188, 241, 124, 57, 152, 77, 78, 113, 73, 147, 216, 164, 53, 165, 163, 176, 249, 182 },
                            PasswordSalt = new byte[] { 191, 97, 85, 190, 96, 26, 86, 31, 17, 191, 100, 18, 39, 30, 192, 213, 148, 102, 9, 195, 214, 255, 250, 249, 213, 71, 108, 65, 61, 198, 151, 33, 41, 87, 229, 11, 49, 233, 36, 254, 31, 225, 12, 201, 126, 49, 162, 17, 129, 172, 122, 72, 230, 203, 135, 218, 220, 16, 241, 14, 144, 88, 75, 50, 79, 225, 170, 107, 193, 50, 105, 123, 233, 22, 47, 150, 35, 253, 7, 108, 18, 197, 138, 223, 28, 250, 217, 197, 114, 214, 221, 158, 119, 169, 85, 34, 152, 86, 39, 10, 224, 234, 197, 14, 61, 125, 90, 103, 199, 130, 122, 5, 8, 207, 99, 103, 15, 100, 84, 51, 164, 45, 236, 56, 131, 90, 47, 154 },
                            Role = 0,
                            UserName = "InternAccount"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.HasOne("Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignJobs")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("CampaignJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.HasOne("Domain.Entities.CampaignJob", "CampaignJob")
                        .WithMany("Candidates")
                        .HasForeignKey("CampaignJobId");

                    b.Navigation("CampaignJob");
                });

            modelBuilder.Entity("Domain.Entities.JobTrainingProgram", b =>
                {
                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("JobTrainingPrograms")
                        .HasForeignKey("JobId");

                    b.HasOne("Domain.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("JobTrainingPrograms")
                        .HasForeignKey("TrainingProgramId");

                    b.Navigation("Job");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.CampaignJob", "CampaignJob")
                        .WithMany("Interns")
                        .HasForeignKey("CampaignJobId");

                    b.Navigation("CampaignJob");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Navigation("CampaignJobs");
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Interns");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("CampaignJobs");

                    b.Navigation("JobTrainingPrograms");
                });

            modelBuilder.Entity("Domain.Entities.TrainingProgram", b =>
                {
                    b.Navigation("JobTrainingPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
