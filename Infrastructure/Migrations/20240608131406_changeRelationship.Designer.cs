// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240608131406_changeRelationship")]
    partial class changeRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("CampaignJobs");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CampaignJobId")
                        .HasColumnType("integer");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignJobId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalMember")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignJobId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignJobId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "HRAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "HRAccount",
                            PasswordHash = new byte[] { 222, 156, 74, 71, 143, 95, 91, 219, 206, 105, 30, 66, 216, 91, 185, 60, 253, 121, 191, 217, 95, 76, 149, 27, 245, 8, 252, 85, 136, 17, 145, 31, 55, 150, 99, 106, 78, 44, 150, 209, 226, 48, 78, 48, 73, 77, 237, 0, 217, 149, 138, 250, 142, 86, 243, 141, 64, 87, 43, 229, 151, 163, 254, 203 },
                            PasswordSalt = new byte[] { 77, 18, 106, 34, 96, 153, 65, 191, 15, 169, 61, 216, 100, 132, 225, 182, 43, 190, 153, 208, 56, 19, 16, 120, 46, 104, 202, 166, 21, 24, 166, 30, 170, 66, 34, 143, 160, 87, 211, 73, 180, 239, 18, 63, 182, 209, 199, 155, 69, 196, 33, 83, 170, 182, 183, 4, 182, 193, 18, 53, 207, 193, 25, 155, 180, 184, 33, 85, 82, 183, 145, 97, 115, 195, 194, 196, 195, 197, 217, 3, 121, 181, 184, 118, 180, 173, 232, 89, 193, 43, 25, 114, 205, 181, 179, 218, 114, 180, 42, 21, 151, 15, 141, 70, 214, 33, 6, 97, 247, 91, 157, 111, 184, 88, 248, 71, 67, 1, 0, 62, 145, 87, 41, 131, 41, 25, 134, 118 },
                            Role = 3,
                            UserName = "HRAccount"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ICAccountt@gmail.com",
                            IsDeleted = false,
                            LastName = "ICAccount",
                            PasswordHash = new byte[] { 126, 155, 11, 65, 123, 28, 173, 171, 125, 110, 250, 45, 192, 57, 164, 8, 178, 178, 68, 34, 253, 59, 190, 21, 76, 211, 94, 186, 213, 248, 110, 29, 250, 86, 16, 37, 77, 17, 244, 157, 79, 155, 44, 235, 231, 1, 166, 150, 193, 165, 207, 38, 133, 140, 168, 185, 223, 163, 125, 97, 196, 83, 202, 71 },
                            PasswordSalt = new byte[] { 36, 117, 138, 6, 205, 9, 77, 39, 147, 164, 213, 235, 86, 205, 149, 54, 41, 119, 57, 58, 243, 237, 71, 12, 128, 234, 198, 26, 217, 13, 53, 227, 18, 52, 70, 53, 171, 11, 63, 47, 86, 175, 51, 251, 141, 112, 243, 178, 224, 103, 227, 200, 23, 207, 251, 207, 103, 4, 104, 223, 252, 45, 206, 222, 42, 92, 5, 27, 156, 14, 173, 202, 251, 87, 97, 34, 21, 183, 202, 127, 7, 55, 191, 130, 10, 78, 146, 245, 166, 231, 126, 124, 135, 114, 119, 47, 244, 50, 71, 177, 84, 188, 227, 60, 201, 225, 4, 222, 211, 191, 14, 206, 250, 34, 104, 63, 209, 16, 132, 4, 33, 47, 224, 200, 174, 182, 46, 145 },
                            Role = 2,
                            UserName = "ICAccount"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mentorAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "mentorAccount",
                            PasswordHash = new byte[] { 77, 161, 174, 30, 244, 54, 40, 60, 31, 25, 255, 31, 71, 34, 102, 97, 210, 140, 182, 131, 92, 143, 123, 16, 122, 103, 221, 53, 32, 53, 103, 106, 22, 192, 103, 194, 117, 239, 90, 110, 175, 127, 129, 97, 127, 63, 196, 25, 151, 151, 101, 109, 34, 245, 102, 163, 193, 18, 214, 63, 199, 246, 183, 81 },
                            PasswordSalt = new byte[] { 200, 78, 173, 88, 30, 166, 158, 68, 60, 45, 30, 252, 86, 36, 119, 105, 197, 219, 96, 7, 46, 143, 52, 151, 121, 80, 186, 108, 166, 35, 110, 192, 205, 180, 9, 158, 198, 211, 19, 109, 231, 150, 54, 115, 102, 37, 234, 134, 152, 41, 84, 51, 19, 230, 243, 225, 194, 203, 46, 3, 220, 224, 65, 47, 167, 220, 254, 243, 102, 101, 182, 151, 106, 194, 55, 2, 143, 249, 168, 97, 185, 57, 235, 251, 222, 20, 175, 143, 250, 28, 206, 209, 81, 213, 234, 14, 141, 75, 176, 199, 245, 242, 29, 41, 144, 42, 120, 229, 175, 31, 220, 131, 21, 207, 241, 175, 186, 103, 3, 104, 41, 146, 118, 18, 38, 142, 162, 22 },
                            Role = 1,
                            UserName = "mentorAccount"
                        },
                        new
                        {
                            Id = 4,
                            Email = "InternAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "InternAccount",
                            PasswordHash = new byte[] { 14, 177, 4, 153, 188, 243, 149, 85, 208, 232, 67, 128, 137, 33, 101, 197, 230, 215, 103, 236, 59, 223, 149, 152, 196, 168, 106, 192, 71, 254, 83, 166, 212, 147, 86, 241, 47, 1, 27, 239, 71, 148, 79, 139, 46, 172, 105, 242, 99, 72, 152, 175, 48, 208, 136, 57, 182, 213, 209, 16, 18, 235, 67, 154 },
                            PasswordSalt = new byte[] { 4, 224, 83, 157, 86, 11, 170, 222, 29, 128, 43, 2, 181, 85, 33, 243, 2, 207, 178, 193, 95, 36, 3, 50, 180, 38, 15, 109, 210, 95, 37, 112, 135, 117, 227, 78, 53, 242, 212, 39, 69, 88, 20, 1, 194, 98, 33, 56, 223, 61, 226, 88, 129, 252, 77, 146, 67, 168, 107, 159, 170, 81, 82, 200, 183, 156, 3, 250, 100, 77, 157, 148, 17, 118, 247, 107, 23, 0, 135, 210, 242, 151, 48, 250, 130, 101, 248, 141, 58, 11, 203, 125, 23, 14, 90, 148, 1, 228, 141, 31, 36, 229, 198, 94, 99, 246, 47, 28, 7, 134, 114, 252, 74, 165, 192, 155, 83, 250, 172, 19, 91, 224, 205, 167, 16, 155, 94, 160 },
                            Role = 0,
                            UserName = "InternAccount"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.HasOne("Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("CampaignJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.HasOne("Domain.Entities.CampaignJob", "CampaignJob")
                        .WithMany("Candidates")
                        .HasForeignKey("CampaignJobId");

                    b.Navigation("CampaignJob");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.CampaignJob", "CampaignJob")
                        .WithMany("Interns")
                        .HasForeignKey("CampaignJobId");

                    b.Navigation("CampaignJob");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Navigation("CampaignJobs");
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Interns");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("CampaignJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
