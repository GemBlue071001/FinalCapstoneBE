// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241117135355_updateVector")]
    partial class updateVector
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessStreamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessStreams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessStreamName = "Tech",
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(2508),
                            Description = "Tech Industry",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BusinessStreamId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessStreamId");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "39 Vo Chi Cong Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "Fpt Software",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(4430),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 1000,
                            WebsiteURL = "https://fpt.com/vi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "64 Le Van Si Stress",
                            BusinessStreamId = 1,
                            City = "HCM",
                            CompanyDescription = "Tech Company",
                            CompanyName = "High Tech",
                            Country = "VietNam",
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(4434),
                            EstablishedYear = 2008,
                            IsDeleted = false,
                            NumberOfEmployees = 50,
                            WebsiteURL = "https://fpt.com/vi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailContent = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Job Opportunity - ${CompanyName}</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n        }\r\n        .email-container {\r\n            width: 100%;\r\n            max-width: 600px;\r\n            margin: 0 auto;\r\n            border: 1px solid #e0e0e0;\r\n            padding: 20px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n        }\r\n        .header {\r\n            background-color: #af2e2f;\r\n            color: white;\r\n            padding: 10px;\r\n            text-align: center;\r\n        }\r\n        .header img {\r\n            max-width: 100px;\r\n        }\r\n        .content {\r\n            padding: 20px;\r\n            text-align: center;\r\n        }\r\n        .job-title {\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            color: #2b2b2b;\r\n        }\r\n        .job-details {\r\n            font-size: 14px;\r\n            color: #555;\r\n            margin: 10px 0;\r\n        }\r\n        .cta-button {\r\n            display: inline-block;\r\n            background-color: #d32f2f;\r\n            color: white;\r\n            padding: 10px 20px;\r\n            text-decoration: none;\r\n            border-radius: 5px;\r\n            margin-top: 15px;\r\n        }\r\n        .footer {\r\n            text-align: center;\r\n            font-size: 12px;\r\n            color: #999;\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"email-container\">\r\n        <div class=\"header\">\r\n            <p>Final Capstone</p>\r\n        </div>\r\n        <div class=\"content\">\r\n            <p>Hi ${Name},</p>\r\n            <p>Based on your subscription, our Job Robot found a new ${CompanyName} job for you.</p>\r\n            <p class=\"job-title\">${JobTitle}</p>\r\n            <p class=\"job-details\">\r\n                ${CompanyName} <br>\r\n                Java - Cloud - Spring\r\n            </p>\r\n            <a href=\"#\" class=\"cta-button\">More ${CompanyName} Jobs</a>\r\n        </div>\r\n        <div class=\"footer\">\r\n            <p>By engaging with this email, you agree to <a href=\"#\">Terms and Conditions</a> and <a href=\"#\">Privacy Policy</a>.</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>",
                            Name = "Job Opportunity Email"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("Domain.Entities.FollowCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowCompanys");
                });

            modelBuilder.Entity("Domain.Entities.FollowJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("FollowJobs");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StressAddressDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("LocationId");

                    b.ToTable("JobLocations");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(384)");

                    b.Property<int>("ExperienceRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("JobPostReviewStatus")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QualificationRequired")
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Embedding")
                        .HasAnnotation("Npgsql:StorageParameter:ef_construction", 64)
                        .HasAnnotation("Npgsql:StorageParameter:m", 16);

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Embedding"), "hnsw");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Embedding"), new[] { "vector_l2_ops" });

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalyzedResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CvId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostActivities");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivityComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobPostActivityId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostActivityId");

                    b.ToTable("JobPostActivityComments");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillSetId");

                    b.ToTable("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A Full Time Job",
                            Name = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Part Time Job",
                            Name = "Part Time"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A Remote Job",
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "HO CHI MINH"
                        },
                        new
                        {
                            Id = 2,
                            City = "HA NOI"
                        },
                        new
                        {
                            Id = 3,
                            City = "DA NANG"
                        },
                        new
                        {
                            Id = 4,
                            City = "HAI PHONG"
                        },
                        new
                        {
                            Id = 5,
                            City = "CAN THO"
                        },
                        new
                        {
                            Id = 6,
                            City = "NHA TRANG"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPostActivityId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostActivityId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("SeekerSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Shorthand")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SkillSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5165),
                            Description = "Business Analyst",
                            IsDeleted = false,
                            Name = "Business Analyst",
                            Shorthand = "BA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5169),
                            Description = "C#",
                            IsDeleted = false,
                            Name = "C#",
                            Shorthand = "C#"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5170),
                            Description = "Java Script",
                            IsDeleted = false,
                            Name = "Java Script",
                            Shorthand = "JS"
                        },
                        new
                        {
                            Id = 200,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5171),
                            IsDeleted = false,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 201,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5172),
                            IsDeleted = false,
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 202,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5173),
                            IsDeleted = false,
                            Name = "Bridge Engineer"
                        },
                        new
                        {
                            Id = 203,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5174),
                            IsDeleted = false,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 204,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5175),
                            IsDeleted = false,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 205,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5175),
                            IsDeleted = false,
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 206,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5176),
                            IsDeleted = false,
                            Name = "Magento"
                        },
                        new
                        {
                            Id = 207,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5177),
                            IsDeleted = false,
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 208,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5178),
                            IsDeleted = false,
                            Name = "NextJS"
                        },
                        new
                        {
                            Id = 209,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5179),
                            IsDeleted = false,
                            Name = "OOP"
                        },
                        new
                        {
                            Id = 210,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5179),
                            IsDeleted = false,
                            Name = "PQA"
                        },
                        new
                        {
                            Id = 211,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5180),
                            IsDeleted = false,
                            Name = "ReactJS"
                        },
                        new
                        {
                            Id = 212,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5181),
                            IsDeleted = false,
                            Name = "Solution Architect"
                        },
                        new
                        {
                            Id = 213,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5182),
                            IsDeleted = false,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 214,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5182),
                            IsDeleted = false,
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 215,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5183),
                            IsDeleted = false,
                            Name = "Agile"
                        },
                        new
                        {
                            Id = 216,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5184),
                            IsDeleted = false,
                            Name = "ASP.NET"
                        },
                        new
                        {
                            Id = 217,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5185),
                            IsDeleted = false,
                            Name = "Big Data"
                        },
                        new
                        {
                            Id = 218,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5185),
                            IsDeleted = false,
                            Name = "Cloud"
                        },
                        new
                        {
                            Id = 219,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5186),
                            IsDeleted = false,
                            Name = "Data Analyst"
                        },
                        new
                        {
                            Id = 220,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5187),
                            IsDeleted = false,
                            Name = "DevSecOps"
                        },
                        new
                        {
                            Id = 221,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5188),
                            IsDeleted = false,
                            Name = "HTML5"
                        },
                        new
                        {
                            Id = 222,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5189),
                            IsDeleted = false,
                            Name = "JQuery"
                        },
                        new
                        {
                            Id = 223,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 543, DateTimeKind.Utc).AddTicks(5189),
                            IsDeleted = false,
                            Name = "SQL"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLookingForJob")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PremiumExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(1700),
                            Email = "User1@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "User1",
                            PasswordHash = new byte[] { 222, 255, 187, 200, 152, 155, 33, 177, 122, 90, 178, 211, 90, 28, 24, 130, 38, 72, 12, 160, 106, 169, 52, 126, 184, 105, 202, 50, 56, 29, 168, 156, 100, 228, 33, 140, 122, 179, 115, 184, 117, 114, 205, 135, 87, 116, 74, 237, 63, 47, 31, 197, 208, 71, 32, 219, 20, 164, 149, 111, 4, 27, 15, 164 },
                            PasswordSalt = new byte[] { 233, 23, 222, 200, 161, 208, 154, 66, 184, 181, 185, 196, 212, 250, 125, 134, 156, 11, 131, 229, 92, 33, 110, 161, 57, 11, 102, 164, 181, 81, 160, 63, 22, 254, 174, 82, 68, 214, 167, 79, 37, 37, 56, 76, 127, 0, 242, 221, 13, 173, 99, 210, 50, 71, 35, 1, 245, 212, 160, 1, 255, 112, 145, 110, 186, 119, 109, 251, 78, 190, 227, 142, 2, 234, 165, 99, 83, 172, 147, 192, 101, 185, 70, 27, 51, 158, 41, 14, 210, 177, 247, 241, 232, 223, 63, 128, 105, 167, 102, 50, 200, 125, 123, 234, 63, 122, 0, 66, 236, 148, 86, 136, 121, 20, 240, 80, 44, 226, 251, 94, 180, 173, 33, 103, 141, 91, 50, 198 },
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(1710),
                            Email = "User2@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "User2",
                            PasswordHash = new byte[] { 40, 79, 151, 161, 244, 211, 228, 243, 24, 131, 20, 81, 58, 105, 108, 222, 123, 66, 59, 13, 223, 6, 206, 121, 71, 7, 132, 94, 143, 107, 74, 46, 177, 179, 133, 74, 36, 231, 67, 87, 132, 180, 2, 96, 207, 174, 201, 94, 39, 191, 90, 211, 217, 117, 165, 204, 60, 142, 176, 71, 184, 198, 48, 83 },
                            PasswordSalt = new byte[] { 84, 148, 141, 25, 13, 96, 132, 167, 33, 244, 10, 97, 41, 161, 139, 135, 102, 215, 67, 69, 234, 76, 243, 215, 81, 110, 27, 195, 150, 190, 163, 38, 88, 223, 41, 62, 14, 217, 149, 1, 130, 107, 195, 229, 142, 179, 221, 115, 18, 165, 175, 83, 207, 182, 106, 133, 99, 203, 225, 237, 7, 206, 138, 212, 183, 132, 106, 75, 232, 78, 53, 219, 111, 52, 158, 7, 52, 157, 25, 227, 227, 91, 12, 5, 127, 166, 197, 35, 39, 85, 27, 2, 155, 12, 150, 65, 215, 224, 49, 251, 179, 74, 75, 146, 228, 154, 159, 155, 178, 167, 66, 245, 55, 214, 225, 81, 23, 180, 122, 197, 9, 9, 67, 69, 221, 207, 242, 95 },
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(1712),
                            Email = "Employer@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "Employer",
                            PasswordHash = new byte[] { 5, 114, 34, 127, 44, 248, 24, 97, 178, 240, 62, 62, 34, 11, 70, 27, 43, 54, 117, 172, 205, 140, 151, 176, 107, 142, 59, 82, 176, 14, 171, 191, 209, 35, 152, 127, 37, 23, 189, 201, 104, 0, 7, 196, 144, 54, 207, 36, 12, 129, 175, 29, 163, 138, 196, 191, 225, 140, 216, 55, 68, 237, 77, 194 },
                            PasswordSalt = new byte[] { 204, 252, 228, 94, 251, 48, 205, 79, 53, 199, 67, 22, 90, 168, 222, 212, 198, 193, 109, 205, 213, 81, 199, 229, 115, 62, 195, 80, 231, 228, 203, 250, 166, 219, 134, 122, 180, 136, 21, 92, 64, 183, 144, 61, 181, 93, 66, 159, 10, 73, 248, 143, 223, 203, 73, 140, 59, 104, 38, 21, 102, 7, 122, 182, 182, 244, 87, 38, 138, 112, 13, 0, 131, 62, 231, 176, 208, 166, 94, 124, 242, 164, 123, 24, 0, 209, 48, 36, 6, 135, 183, 255, 133, 116, 237, 10, 190, 238, 90, 95, 199, 250, 152, 210, 181, 8, 52, 143, 186, 10, 251, 139, 159, 155, 33, 234, 65, 104, 81, 33, 81, 245, 96, 24, 75, 48, 238, 14 },
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 17, 13, 53, 55, 542, DateTimeKind.Utc).AddTicks(1716),
                            Email = "Admin@gmail.com",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            IsLookingForJob = false,
                            IsPremium = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 51, 213, 55, 51, 22, 195, 84, 105, 170, 10, 196, 11, 242, 69, 72, 229, 144, 186, 4, 199, 214, 142, 114, 127, 221, 163, 126, 60, 51, 11, 78, 201, 57, 255, 101, 62, 85, 5, 132, 229, 249, 54, 248, 164, 212, 222, 87, 85, 145, 152, 89, 6, 211, 252, 75, 168, 27, 245, 49, 90, 189, 177, 253, 137 },
                            PasswordSalt = new byte[] { 110, 14, 125, 45, 0, 11, 98, 203, 114, 96, 94, 203, 195, 175, 110, 138, 60, 86, 190, 253, 228, 20, 205, 109, 172, 21, 180, 228, 178, 86, 70, 159, 139, 232, 77, 84, 52, 204, 197, 103, 198, 50, 254, 221, 245, 234, 126, 250, 49, 103, 158, 236, 63, 51, 231, 41, 214, 115, 50, 93, 61, 161, 85, 104, 154, 140, 242, 232, 145, 236, 93, 129, 79, 128, 121, 247, 233, 183, 50, 9, 113, 9, 250, 65, 93, 189, 179, 251, 94, 27, 34, 15, 136, 11, 133, 230, 230, 81, 95, 27, 18, 20, 98, 228, 19, 62, 44, 174, 27, 113, 226, 132, 34, 187, 63, 241, 235, 38, 46, 163, 180, 7, 211, 118, 64, 209, 221, 229 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserJobAlertCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JobTile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinSalary")
                        .HasColumnType("numeric");

                    b.Property<int?>("SkillSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SkillSetId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("CVs")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.BusinessStream", "BusinessStream")
                        .WithMany("Companys")
                        .HasForeignKey("BusinessStreamId");

                    b.Navigation("BusinessStream");
                });

            modelBuilder.Entity("Domain.Entities.EducationDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("EducationDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.EmailVerification", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "User")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.FollowCompany", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("FollowCompanys")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("FollowCompanys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.FollowJob", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("FollowJobs")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("FollowJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobLocation", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("JobLocations")
                        .HasForeignKey("LocationId");

                    b.Navigation("JobPost");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("JobType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.HasOne("Domain.Entities.CV", "CV")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("CvId");

                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("JobPostActivitys")
                        .HasForeignKey("UserId");

                    b.Navigation("CV");

                    b.Navigation("JobPost");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivityComment", b =>
                {
                    b.HasOne("Domain.Entities.JobPostActivity", "JobPostActivity")
                        .WithMany("JobPostActivityComments")
                        .HasForeignKey("JobPostActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPostActivity");
                });

            modelBuilder.Entity("Domain.Entities.JobSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.JobPost", "JobPost")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("JobPostId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("JobSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.Navigation("JobPost");

                    b.Navigation("SkillSet");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.JobPostActivity", "JobPostActivity")
                        .WithMany("Notifications")
                        .HasForeignKey("JobPostActivityId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPostActivity");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.SeekerSkillSet", b =>
                {
                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("SeekerSkillSets")
                        .HasForeignKey("UserId");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("UserAccounts")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.UserJobAlertCriteria", b =>
                {
                    b.HasOne("Domain.Entities.JobType", "JobType")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("LocationId");

                    b.HasOne("Domain.Entities.SkillSet", "SkillSet")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("SkillSetId");

                    b.HasOne("Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserJobAlertCriterias")
                        .HasForeignKey("UserId");

                    b.Navigation("JobType");

                    b.Navigation("Location");

                    b.Navigation("SkillSet");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Domain.Entities.BusinessStream", b =>
                {
                    b.Navigation("Companys");
                });

            modelBuilder.Entity("Domain.Entities.CV", b =>
                {
                    b.Navigation("JobPostActivitys");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("EmailVerifications");

                    b.Navigation("FollowCompanys");

                    b.Navigation("JobPosts");

                    b.Navigation("Reviews");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.JobPost", b =>
                {
                    b.Navigation("FollowJobs");

                    b.Navigation("JobLocations");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobSkillSets");
                });

            modelBuilder.Entity("Domain.Entities.JobPostActivity", b =>
                {
                    b.Navigation("JobPostActivityComments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.JobType", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Navigation("JobLocations");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.SkillSet", b =>
                {
                    b.Navigation("JobSkillSets");

                    b.Navigation("SeekerSkillSets");

                    b.Navigation("UserJobAlertCriterias");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("CVs");

                    b.Navigation("EducationDetails");

                    b.Navigation("EmailVerifications");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("FollowCompanys");

                    b.Navigation("FollowJobs");

                    b.Navigation("JobPostActivitys");

                    b.Navigation("JobPosts");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("SeekerSkillSets");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserJobAlertCriterias");
                });
#pragma warning restore 612, 618
        }
    }
}
