// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240531161035_campaign")]
    partial class campaign
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Domain.Entities.CampaignTrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("CampaignTrainingPrograms");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Domain.Entities.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalMember")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainingProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "HRAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "HRAccount",
                            PasswordHash = new byte[] { 105, 215, 141, 246, 143, 177, 8, 132, 97, 35, 83, 161, 12, 114, 226, 157, 254, 121, 196, 143, 218, 74, 216, 121, 130, 60, 167, 64, 231, 198, 208, 252, 25, 104, 182, 85, 144, 36, 53, 248, 44, 54, 172, 5, 165, 144, 121, 19, 74, 5, 133, 23, 14, 180, 123, 212, 81, 157, 20, 164, 104, 255, 34, 100 },
                            PasswordSalt = new byte[] { 13, 109, 162, 195, 222, 109, 130, 99, 222, 196, 147, 138, 61, 101, 66, 19, 127, 229, 61, 16, 177, 17, 127, 110, 33, 119, 77, 186, 119, 250, 135, 39, 237, 11, 251, 152, 39, 101, 52, 83, 129, 144, 64, 120, 252, 120, 68, 27, 158, 54, 36, 79, 70, 139, 156, 45, 1, 137, 95, 109, 37, 128, 115, 11, 102, 154, 13, 26, 200, 119, 163, 56, 16, 155, 249, 236, 23, 146, 31, 158, 247, 190, 212, 225, 199, 246, 172, 158, 89, 214, 20, 208, 251, 255, 81, 45, 218, 14, 125, 19, 40, 216, 35, 84, 147, 204, 130, 220, 193, 158, 131, 96, 230, 69, 189, 190, 63, 116, 82, 165, 183, 119, 83, 114, 195, 211, 94, 7 },
                            Role = 3,
                            UserName = "HRAccount"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ICAccountt@gmail.com",
                            IsDeleted = false,
                            LastName = "ICAccount",
                            PasswordHash = new byte[] { 30, 138, 103, 181, 107, 132, 151, 99, 211, 236, 66, 194, 128, 241, 65, 150, 31, 151, 244, 115, 224, 157, 186, 62, 122, 191, 150, 124, 196, 197, 96, 143, 228, 246, 80, 127, 126, 51, 156, 213, 181, 129, 188, 28, 252, 181, 12, 166, 116, 4, 103, 91, 77, 87, 198, 64, 156, 74, 213, 214, 57, 152, 12, 121 },
                            PasswordSalt = new byte[] { 74, 184, 155, 143, 179, 151, 28, 75, 242, 6, 42, 7, 102, 9, 203, 118, 132, 247, 139, 152, 25, 43, 4, 76, 124, 31, 228, 233, 112, 188, 251, 192, 230, 82, 156, 230, 167, 110, 172, 83, 43, 37, 25, 118, 233, 183, 135, 35, 87, 15, 103, 206, 176, 160, 7, 217, 225, 117, 67, 228, 221, 169, 183, 198, 224, 212, 87, 155, 29, 125, 223, 179, 210, 4, 173, 244, 136, 38, 187, 209, 122, 132, 237, 122, 24, 109, 178, 216, 77, 159, 67, 50, 36, 36, 219, 197, 191, 176, 37, 83, 144, 215, 233, 16, 232, 38, 33, 86, 130, 247, 230, 241, 96, 17, 19, 215, 151, 213, 169, 2, 244, 2, 236, 88, 55, 166, 186, 215 },
                            Role = 2,
                            UserName = "ICAccount"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mentorAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "mentorAccount",
                            PasswordHash = new byte[] { 209, 190, 248, 199, 244, 144, 164, 195, 187, 241, 103, 114, 124, 190, 162, 11, 121, 117, 11, 195, 52, 205, 175, 222, 83, 222, 164, 109, 124, 214, 139, 46, 81, 42, 253, 190, 223, 199, 45, 56, 139, 249, 24, 83, 94, 101, 131, 74, 237, 49, 10, 82, 61, 29, 62, 73, 45, 151, 194, 32, 201, 34, 194, 37 },
                            PasswordSalt = new byte[] { 158, 1, 198, 60, 81, 46, 149, 35, 25, 235, 180, 75, 146, 168, 207, 10, 145, 157, 211, 101, 251, 213, 65, 42, 90, 234, 52, 247, 78, 76, 44, 51, 29, 140, 125, 1, 178, 145, 178, 180, 140, 121, 27, 10, 123, 175, 233, 12, 217, 114, 232, 236, 144, 229, 195, 160, 126, 231, 119, 57, 160, 57, 143, 137, 192, 21, 71, 224, 67, 82, 128, 76, 5, 2, 11, 68, 55, 204, 169, 247, 82, 209, 79, 8, 169, 147, 217, 144, 147, 2, 212, 155, 50, 216, 165, 111, 182, 22, 103, 218, 109, 175, 54, 147, 82, 58, 129, 115, 197, 32, 127, 170, 226, 141, 212, 78, 117, 58, 6, 170, 140, 32, 129, 129, 162, 190, 6, 149 },
                            Role = 1,
                            UserName = "mentorAccount"
                        },
                        new
                        {
                            Id = 4,
                            Email = "InternAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "InternAccount",
                            PasswordHash = new byte[] { 231, 89, 11, 6, 21, 190, 108, 76, 71, 180, 125, 145, 105, 173, 60, 190, 168, 108, 2, 150, 202, 35, 44, 137, 3, 65, 85, 67, 167, 240, 108, 41, 205, 234, 139, 85, 110, 110, 201, 133, 29, 124, 168, 147, 38, 52, 8, 204, 167, 129, 40, 117, 68, 40, 91, 172, 212, 93, 94, 49, 44, 146, 201, 190 },
                            PasswordSalt = new byte[] { 106, 253, 41, 87, 183, 56, 114, 164, 73, 231, 184, 162, 92, 51, 35, 156, 133, 242, 151, 81, 206, 73, 42, 39, 94, 244, 250, 59, 255, 200, 130, 125, 157, 164, 77, 96, 121, 195, 194, 99, 232, 57, 145, 210, 56, 10, 255, 210, 175, 202, 71, 91, 63, 158, 228, 186, 36, 200, 235, 254, 241, 139, 6, 255, 105, 242, 11, 38, 124, 121, 131, 221, 217, 225, 74, 233, 192, 205, 97, 31, 42, 206, 164, 234, 68, 87, 136, 73, 250, 51, 220, 147, 73, 213, 237, 209, 160, 109, 28, 23, 241, 17, 170, 65, 79, 46, 211, 181, 141, 175, 158, 133, 157, 230, 9, 195, 42, 100, 216, 230, 13, 48, 11, 217, 17, 47, 197, 242 },
                            Role = 0,
                            UserName = "InternAccount"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CampaignTrainingProgram", b =>
                {
                    b.HasOne("Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignTrainingPrograms")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("CampaignTrainingPrograms")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.HasOne("Domain.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("Candidates")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("Interns")
                        .HasForeignKey("TrainingProgramId");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Navigation("CampaignTrainingPrograms");
                });

            modelBuilder.Entity("Domain.Entities.TrainingProgram", b =>
                {
                    b.Navigation("CampaignTrainingPrograms");

                    b.Navigation("Candidates");

                    b.Navigation("Interns");
                });
#pragma warning restore 612, 618
        }
    }
}
