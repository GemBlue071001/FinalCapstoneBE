// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240609074924_changeRefKey")]
    partial class changeRefKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("JobId");

                    b.ToTable("CampaignJobs");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CampaignJobId")
                        .HasColumnType("integer");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignJobId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("ScopeOfWork")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalMember")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignJobId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignJobId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "HRAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "HRAccount",
                            PasswordHash = new byte[] { 89, 2, 87, 77, 17, 173, 233, 16, 90, 6, 191, 145, 192, 241, 253, 34, 51, 242, 14, 185, 60, 73, 22, 245, 252, 94, 215, 96, 203, 106, 236, 24, 18, 71, 153, 148, 20, 244, 6, 156, 112, 55, 56, 188, 98, 54, 187, 38, 234, 193, 240, 148, 18, 91, 122, 218, 223, 235, 81, 175, 75, 230, 218, 35 },
                            PasswordSalt = new byte[] { 136, 216, 25, 107, 35, 173, 210, 75, 138, 241, 105, 187, 190, 243, 39, 189, 112, 163, 156, 37, 64, 12, 186, 247, 141, 189, 236, 228, 45, 125, 183, 254, 77, 238, 142, 159, 178, 148, 212, 219, 171, 181, 171, 210, 148, 176, 137, 72, 10, 84, 15, 50, 83, 191, 92, 42, 196, 235, 74, 40, 103, 228, 198, 3, 62, 208, 176, 218, 222, 126, 49, 188, 102, 140, 5, 11, 129, 49, 127, 169, 161, 21, 139, 34, 65, 30, 173, 18, 249, 93, 230, 43, 30, 229, 189, 47, 157, 240, 10, 94, 25, 253, 211, 69, 155, 119, 103, 109, 41, 53, 148, 160, 30, 42, 48, 112, 91, 146, 172, 134, 146, 206, 203, 83, 180, 186, 55, 231 },
                            Role = 3,
                            UserName = "HRAccount"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ICAccountt@gmail.com",
                            IsDeleted = false,
                            LastName = "ICAccount",
                            PasswordHash = new byte[] { 15, 149, 205, 163, 26, 75, 55, 183, 178, 135, 114, 65, 248, 190, 103, 126, 71, 131, 34, 79, 3, 169, 208, 1, 155, 100, 12, 248, 51, 83, 47, 108, 179, 29, 156, 117, 213, 86, 60, 190, 117, 248, 102, 132, 181, 31, 209, 146, 210, 96, 126, 60, 59, 178, 169, 189, 90, 79, 237, 225, 199, 120, 174, 4 },
                            PasswordSalt = new byte[] { 76, 175, 107, 144, 97, 250, 1, 228, 207, 246, 154, 225, 68, 150, 98, 38, 221, 221, 206, 236, 24, 6, 177, 10, 218, 200, 205, 25, 157, 25, 89, 16, 148, 205, 4, 109, 245, 4, 107, 203, 192, 153, 154, 43, 145, 58, 0, 225, 27, 46, 10, 13, 59, 10, 15, 44, 123, 202, 197, 190, 157, 85, 81, 177, 141, 233, 255, 237, 68, 229, 207, 244, 70, 172, 52, 137, 58, 201, 100, 96, 204, 129, 220, 13, 231, 59, 154, 76, 67, 217, 40, 228, 133, 210, 222, 123, 109, 84, 236, 57, 114, 17, 96, 16, 167, 36, 72, 37, 97, 187, 78, 238, 155, 22, 38, 89, 22, 206, 211, 44, 182, 9, 155, 109, 92, 194, 24, 4 },
                            Role = 2,
                            UserName = "ICAccount"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mentorAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "mentorAccount",
                            PasswordHash = new byte[] { 2, 225, 40, 235, 80, 8, 101, 19, 111, 150, 240, 106, 103, 48, 130, 57, 159, 151, 218, 107, 129, 123, 237, 131, 231, 190, 16, 71, 131, 132, 135, 0, 223, 223, 95, 30, 164, 55, 240, 238, 45, 197, 103, 81, 234, 15, 65, 156, 90, 170, 197, 100, 237, 184, 113, 35, 78, 65, 0, 2, 147, 232, 196, 57 },
                            PasswordSalt = new byte[] { 112, 27, 245, 239, 110, 13, 58, 114, 112, 140, 147, 61, 30, 65, 107, 212, 206, 160, 62, 180, 98, 12, 130, 21, 101, 200, 156, 236, 94, 3, 60, 207, 212, 239, 77, 159, 94, 167, 20, 70, 23, 71, 169, 215, 96, 121, 10, 64, 192, 20, 172, 222, 80, 200, 234, 148, 144, 75, 253, 55, 7, 224, 84, 224, 23, 240, 110, 254, 53, 227, 174, 36, 232, 133, 153, 160, 165, 242, 137, 246, 160, 94, 151, 115, 176, 129, 164, 242, 220, 132, 50, 113, 20, 66, 254, 241, 225, 241, 162, 79, 154, 121, 5, 13, 58, 137, 122, 167, 251, 91, 72, 56, 190, 250, 187, 55, 11, 27, 16, 177, 248, 234, 176, 230, 190, 210, 240, 160 },
                            Role = 1,
                            UserName = "mentorAccount"
                        },
                        new
                        {
                            Id = 4,
                            Email = "InternAccount@gmail.com",
                            IsDeleted = false,
                            LastName = "InternAccount",
                            PasswordHash = new byte[] { 190, 114, 192, 190, 19, 14, 229, 87, 15, 145, 23, 166, 82, 92, 123, 202, 86, 122, 206, 127, 188, 233, 67, 11, 36, 52, 53, 147, 177, 139, 134, 153, 154, 196, 104, 223, 55, 147, 77, 135, 99, 157, 173, 167, 16, 137, 63, 30, 48, 193, 61, 120, 158, 136, 110, 24, 225, 236, 11, 38, 182, 30, 46, 205 },
                            PasswordSalt = new byte[] { 87, 162, 173, 224, 246, 17, 137, 242, 98, 114, 17, 2, 63, 132, 28, 187, 93, 8, 246, 196, 193, 127, 144, 21, 138, 181, 62, 174, 78, 97, 0, 1, 8, 158, 74, 106, 240, 228, 95, 204, 244, 173, 6, 82, 144, 129, 59, 107, 69, 205, 44, 208, 45, 204, 224, 100, 125, 46, 187, 247, 128, 167, 79, 205, 17, 202, 116, 153, 155, 56, 216, 131, 255, 10, 241, 130, 28, 161, 179, 247, 208, 139, 110, 136, 125, 86, 117, 246, 201, 216, 15, 238, 116, 184, 240, 128, 230, 255, 113, 198, 202, 223, 112, 5, 32, 87, 182, 87, 87, 202, 212, 163, 168, 82, 138, 39, 62, 126, 204, 106, 170, 135, 145, 25, 190, 113, 95, 71 },
                            Role = 0,
                            UserName = "InternAccount"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.HasOne("Domain.Entities.Campaign", "Campaign")
                        .WithMany("CampaignJobs")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("CampaignJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.HasOne("Domain.Entities.CampaignJob", "CampaignJob")
                        .WithMany("Candidates")
                        .HasForeignKey("CampaignJobId");

                    b.Navigation("CampaignJob");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.CampaignJob", "CampaignJob")
                        .WithMany("Interns")
                        .HasForeignKey("CampaignJobId");

                    b.Navigation("CampaignJob");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Navigation("CampaignJobs");
                });

            modelBuilder.Entity("Domain.Entities.CampaignJob", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Interns");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("CampaignJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
